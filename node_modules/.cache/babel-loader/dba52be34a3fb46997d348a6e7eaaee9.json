{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar token_managers_1 = require(\"../token-managers\");\n\nvar utils_1 = require(\"../utils\");\n\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The [[CloudPakForDataAuthenticator]] will use the user-supplied url, username and password values to obtain\n * a bearer token from a token server.  When the bearer token expires, a new token is obtained from the token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\n\n\nvar CloudPakForDataAuthenticator =\n/** @class */\nfunction (_super) {\n  __extends(CloudPakForDataAuthenticator, _super);\n  /**\n   * Create a new [[CloudPakForDataAuthenticator]] instance.\n   *\n   * @param {object} options Configuration options for CloudPakForData authentication.\n   * @param {string} options.url For HTTP token requests.\n   * @param {string} options.username The username used to obtain a bearer token.\n   * @param {string} options.password The password used to obtain a bearer token.\n   * @param {boolean} [options.disableSslVerification] A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not\n   * @param {object<string, string>} [options.headers] to be sent with every.\n   * @throws `Error` The username, password, and/or url are not valid, or unspecified, for Cloud Pak For Data token\n   *   requests.\n   */\n\n\n  function CloudPakForDataAuthenticator(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.requiredOptions = ['username', 'password', 'url'];\n    utils_1.validateInput(options, _this.requiredOptions);\n    _this.username = options.username;\n    _this.password = options.password; // the param names are shared between the authenticator and the token\n    // manager so we can just pass along the options object\n\n    _this.tokenManager = new token_managers_1.Cp4dTokenManager(options);\n    return _this;\n  }\n\n  return CloudPakForDataAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator);\n\nexports.CloudPakForDataAuthenticator = CloudPakForDataAuthenticator;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-cloud-sdk-core/auth/authenticators/cloud-pak-for-data-authenticator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","token_managers_1","require","utils_1","token_request_based_authenticator_1","CloudPakForDataAuthenticator","_super","options","_this","call","requiredOptions","validateInput","username","password","tokenManager","Cp4dTokenManager","TokenRequestBasedAuthenticator"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaAN,MAAM,CAACU,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIE,mCAAmC,GAAGF,OAAO,CAAC,qCAAD,CAAjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIG,4BAA4B;AAAG;AAAe,UAAUC,MAAV,EAAkB;AAChEtB,EAAAA,SAAS,CAACqB,4BAAD,EAA+BC,MAA/B,CAAT;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,WAASD,4BAAT,CAAsCE,OAAtC,EAA+C;AAC3C,QAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,OAAlB,KAA8B,IAA1C;;AACAC,IAAAA,KAAK,CAACE,eAAN,GAAwB,CAAC,UAAD,EAAa,UAAb,EAAyB,KAAzB,CAAxB;AACAP,IAAAA,OAAO,CAACQ,aAAR,CAAsBJ,OAAtB,EAA+BC,KAAK,CAACE,eAArC;AACAF,IAAAA,KAAK,CAACI,QAAN,GAAiBL,OAAO,CAACK,QAAzB;AACAJ,IAAAA,KAAK,CAACK,QAAN,GAAiBN,OAAO,CAACM,QAAzB,CAL2C,CAM3C;AACA;;AACAL,IAAAA,KAAK,CAACM,YAAN,GAAqB,IAAIb,gBAAgB,CAACc,gBAArB,CAAsCR,OAAtC,CAArB;AACA,WAAOC,KAAP;AACH;;AACD,SAAOH,4BAAP;AACH,CA5BiD,CA4BhDD,mCAAmC,CAACY,8BA5BY,CAAlD;;AA6BAjB,OAAO,CAACM,4BAAR,GAAuCA,4BAAvC","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar token_managers_1 = require(\"../token-managers\");\nvar utils_1 = require(\"../utils\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The [[CloudPakForDataAuthenticator]] will use the user-supplied url, username and password values to obtain\n * a bearer token from a token server.  When the bearer token expires, a new token is obtained from the token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\nvar CloudPakForDataAuthenticator = /** @class */ (function (_super) {\n    __extends(CloudPakForDataAuthenticator, _super);\n    /**\n     * Create a new [[CloudPakForDataAuthenticator]] instance.\n     *\n     * @param {object} options Configuration options for CloudPakForData authentication.\n     * @param {string} options.url For HTTP token requests.\n     * @param {string} options.username The username used to obtain a bearer token.\n     * @param {string} options.password The password used to obtain a bearer token.\n     * @param {boolean} [options.disableSslVerification] A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not\n     * @param {object<string, string>} [options.headers] to be sent with every.\n     * @throws `Error` The username, password, and/or url are not valid, or unspecified, for Cloud Pak For Data token\n     *   requests.\n     */\n    function CloudPakForDataAuthenticator(options) {\n        var _this = _super.call(this, options) || this;\n        _this.requiredOptions = ['username', 'password', 'url'];\n        utils_1.validateInput(options, _this.requiredOptions);\n        _this.username = options.username;\n        _this.password = options.password;\n        // the param names are shared between the authenticator and the token\n        // manager so we can just pass along the options object\n        _this.tokenManager = new token_managers_1.Cp4dTokenManager(options);\n        return _this;\n    }\n    return CloudPakForDataAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator));\nexports.CloudPakForDataAuthenticator = CloudPakForDataAuthenticator;\n"]},"metadata":{},"sourceType":"script"}