{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar authenticators_1 = require(\"../authenticators\");\n\nvar read_external_sources_1 = require(\"./read-external-sources\");\n/**\n * Look for external configuration of authenticator.\n *\n * Try to get authenticator from external sources, with the following priority:\n * 1. Credentials file (ibm-credentials.env)\n * 2. Environment variables\n * 3. VCAP Services (Cloud Foundry)\n *\n * @param {string} serviceName The service name prefix.\n *\n */\n\n\nfunction getAuthenticatorFromEnvironment(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  } // construct the credentials object from the environment\n\n\n  var credentials = read_external_sources_1.readExternalSources(serviceName);\n\n  if (credentials === null) {\n    throw new Error('Unable to create an authenticator from the environment.');\n  } // remove client-level properties\n\n\n  delete credentials.url;\n  delete credentials.disableSsl; // convert \"auth\" properties to their proper keys\n\n  if (credentials.authUrl) {\n    credentials.url = credentials.authUrl;\n    delete credentials.authUrl;\n  }\n\n  if (credentials.authDisableSsl) {\n    credentials.disableSslVerification = credentials.authDisableSsl;\n    delete credentials.authDisableSsl;\n  } // default the auth type to `iam` if authType is undefined, or not a string\n\n\n  var authType = credentials.authType;\n\n  if (!authType || typeof authType !== 'string') {\n    authType = 'iam';\n  } // create and return the appropriate authenticator\n\n\n  var authenticator; // fold authType to lower case for case insensitivity\n\n  switch (authType.toLowerCase()) {\n    case 'noauth':\n      authenticator = new authenticators_1.NoAuthAuthenticator();\n      break;\n\n    case 'basic':\n      authenticator = new authenticators_1.BasicAuthenticator(credentials);\n      break;\n\n    case 'bearertoken':\n      authenticator = new authenticators_1.BearerTokenAuthenticator(credentials);\n      break;\n\n    case 'cp4d':\n      authenticator = new authenticators_1.CloudPakForDataAuthenticator(credentials);\n      break;\n\n    case 'iam':\n      authenticator = new authenticators_1.IamAuthenticator(credentials);\n      break;\n\n    default:\n      throw new Error('Invalid value for AUTH_TYPE: ' + authType);\n  }\n\n  return authenticator;\n}\n\nexports.getAuthenticatorFromEnvironment = getAuthenticatorFromEnvironment;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/auth/utils/get-authenticator-from-environment.js"],"names":["Object","defineProperty","exports","value","authenticators_1","require","read_external_sources_1","getAuthenticatorFromEnvironment","serviceName","Error","credentials","readExternalSources","url","disableSsl","authUrl","authDisableSsl","disableSslVerification","authType","authenticator","toLowerCase","NoAuthAuthenticator","BasicAuthenticator","BearerTokenAuthenticator","CloudPakForDataAuthenticator","IamAuthenticator"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,gBAAgB,GAAGC,OAAO,CAAC,mBAAD,CAA9B;;AACA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,yBAAD,CAArC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,+BAAT,CAAyCC,WAAzC,EAAsD;AAClD,MAAI,CAACA,WAAL,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH,GAHiD,CAIlD;;;AACA,MAAIC,WAAW,GAAGJ,uBAAuB,CAACK,mBAAxB,CAA4CH,WAA5C,CAAlB;;AACA,MAAIE,WAAW,KAAK,IAApB,EAA0B;AACtB,UAAM,IAAID,KAAJ,CAAU,yDAAV,CAAN;AACH,GARiD,CASlD;;;AACA,SAAOC,WAAW,CAACE,GAAnB;AACA,SAAOF,WAAW,CAACG,UAAnB,CAXkD,CAYlD;;AACA,MAAIH,WAAW,CAACI,OAAhB,EAAyB;AACrBJ,IAAAA,WAAW,CAACE,GAAZ,GAAkBF,WAAW,CAACI,OAA9B;AACA,WAAOJ,WAAW,CAACI,OAAnB;AACH;;AACD,MAAIJ,WAAW,CAACK,cAAhB,EAAgC;AAC5BL,IAAAA,WAAW,CAACM,sBAAZ,GAAqCN,WAAW,CAACK,cAAjD;AACA,WAAOL,WAAW,CAACK,cAAnB;AACH,GApBiD,CAqBlD;;;AACA,MAAIE,QAAQ,GAAGP,WAAW,CAACO,QAA3B;;AACA,MAAI,CAACA,QAAD,IAAa,OAAOA,QAAP,KAAoB,QAArC,EAA+C;AAC3CA,IAAAA,QAAQ,GAAG,KAAX;AACH,GAzBiD,CA0BlD;;;AACA,MAAIC,aAAJ,CA3BkD,CA4BlD;;AACA,UAAQD,QAAQ,CAACE,WAAT,EAAR;AACI,SAAK,QAAL;AACID,MAAAA,aAAa,GAAG,IAAId,gBAAgB,CAACgB,mBAArB,EAAhB;AACA;;AACJ,SAAK,OAAL;AACIF,MAAAA,aAAa,GAAG,IAAId,gBAAgB,CAACiB,kBAArB,CAAwCX,WAAxC,CAAhB;AACA;;AACJ,SAAK,aAAL;AACIQ,MAAAA,aAAa,GAAG,IAAId,gBAAgB,CAACkB,wBAArB,CAA8CZ,WAA9C,CAAhB;AACA;;AACJ,SAAK,MAAL;AACIQ,MAAAA,aAAa,GAAG,IAAId,gBAAgB,CAACmB,4BAArB,CAAkDb,WAAlD,CAAhB;AACA;;AACJ,SAAK,KAAL;AACIQ,MAAAA,aAAa,GAAG,IAAId,gBAAgB,CAACoB,gBAArB,CAAsCd,WAAtC,CAAhB;AACA;;AACJ;AACI,YAAM,IAAID,KAAJ,CAAU,kCAAkCQ,QAA5C,CAAN;AAjBR;;AAmBA,SAAOC,aAAP;AACH;;AACDhB,OAAO,CAACK,+BAAR,GAA0CA,+BAA1C","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar authenticators_1 = require(\"../authenticators\");\nvar read_external_sources_1 = require(\"./read-external-sources\");\n/**\n * Look for external configuration of authenticator.\n *\n * Try to get authenticator from external sources, with the following priority:\n * 1. Credentials file (ibm-credentials.env)\n * 2. Environment variables\n * 3. VCAP Services (Cloud Foundry)\n *\n * @param {string} serviceName The service name prefix.\n *\n */\nfunction getAuthenticatorFromEnvironment(serviceName) {\n    if (!serviceName) {\n        throw new Error('Service name is required.');\n    }\n    // construct the credentials object from the environment\n    var credentials = read_external_sources_1.readExternalSources(serviceName);\n    if (credentials === null) {\n        throw new Error('Unable to create an authenticator from the environment.');\n    }\n    // remove client-level properties\n    delete credentials.url;\n    delete credentials.disableSsl;\n    // convert \"auth\" properties to their proper keys\n    if (credentials.authUrl) {\n        credentials.url = credentials.authUrl;\n        delete credentials.authUrl;\n    }\n    if (credentials.authDisableSsl) {\n        credentials.disableSslVerification = credentials.authDisableSsl;\n        delete credentials.authDisableSsl;\n    }\n    // default the auth type to `iam` if authType is undefined, or not a string\n    var authType = credentials.authType;\n    if (!authType || typeof authType !== 'string') {\n        authType = 'iam';\n    }\n    // create and return the appropriate authenticator\n    var authenticator;\n    // fold authType to lower case for case insensitivity\n    switch (authType.toLowerCase()) {\n        case 'noauth':\n            authenticator = new authenticators_1.NoAuthAuthenticator();\n            break;\n        case 'basic':\n            authenticator = new authenticators_1.BasicAuthenticator(credentials);\n            break;\n        case 'bearertoken':\n            authenticator = new authenticators_1.BearerTokenAuthenticator(credentials);\n            break;\n        case 'cp4d':\n            authenticator = new authenticators_1.CloudPakForDataAuthenticator(credentials);\n            break;\n        case 'iam':\n            authenticator = new authenticators_1.IamAuthenticator(credentials);\n            break;\n        default:\n            throw new Error('Invalid value for AUTH_TYPE: ' + authType);\n    }\n    return authenticator;\n}\nexports.getAuthenticatorFromEnvironment = getAuthenticatorFromEnvironment;\n"]},"metadata":{},"sourceType":"script"}