{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matches = matches;\nexports.match = match;\nexports.getCharacterFor = getCharacterFor;\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @typedef Key\n * @property key {Array<string>|string}\n * @property which {number}\n * @property keyCode {number}\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.Enter, keys.Space]) {\n *     // ...\n *   }\n * }\n *\n * @param {Event} event\n * @param {Array<Key>} keysToMatch\n * @returns {boolean}\n */\n\nfunction matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.Enter) {\n *     // ...\n *   }\n * }\n *\n * @param {Event|number|string} eventOrCode\n * @param {Key} key\n * @returns {boolean}\n */\n\n\nfunction match(eventOrCode) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      key = _ref.key,\n      which = _ref.which,\n      keyCode = _ref.keyCode;\n\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.indexOf(eventOrCode.key) !== -1;\n  }\n\n  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\n\nfunction getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/carbon-components-react/lib/internal/keyboard/match.js"],"names":["Object","defineProperty","exports","value","matches","match","getCharacterFor","event","keysToMatch","i","length","eventOrCode","_ref","arguments","undefined","key","which","keyCode","Array","isArray","indexOf","String","fromCharCode"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;AACAF,OAAO,CAACG,KAAR,GAAgBA,KAAhB;AACAH,OAAO,CAACI,eAAR,GAA0BA,eAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,OAAT,CAAiBG,KAAjB,EAAwBC,WAAxB,EAAqC;AACnC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACE,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,QAAIJ,KAAK,CAACE,KAAD,EAAQC,WAAW,CAACC,CAAD,CAAnB,CAAT,EAAkC;AAChC,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASJ,KAAT,CAAeM,WAAf,EAA4B;AAC1B,MAAIC,IAAI,GAAGC,SAAS,CAACH,MAAV,GAAmB,CAAnB,IAAwBG,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,MACIE,GAAG,GAAGH,IAAI,CAACG,GADf;AAAA,MAEIC,KAAK,GAAGJ,IAAI,CAACI,KAFjB;AAAA,MAGIC,OAAO,GAAGL,IAAI,CAACK,OAHnB;;AAKA,MAAI,OAAON,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOA,WAAW,KAAKI,GAAvB;AACD;;AAED,MAAI,OAAOJ,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOA,WAAW,KAAKK,KAAhB,IAAyBL,WAAW,KAAKM,OAAhD;AACD;;AAED,MAAIN,WAAW,CAACI,GAAZ,IAAmBG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAvB,EAA2C;AACzC,WAAOA,GAAG,CAACK,OAAJ,CAAYT,WAAW,CAACI,GAAxB,MAAiC,CAAC,CAAzC;AACD;;AAED,SAAOJ,WAAW,CAACI,GAAZ,KAAoBA,GAApB,IAA2BJ,WAAW,CAACK,KAAZ,KAAsBA,KAAjD,IAA0DL,WAAW,CAACM,OAAZ,KAAwBA,OAAzF;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASX,eAAT,CAAyBK,WAAzB,EAAsC;AACpC,MAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnC,WAAOU,MAAM,CAACC,YAAP,CAAoBX,WAApB,CAAP;AACD;;AAED,SAAOA,WAAW,CAACI,GAAZ,IAAmBM,MAAM,CAACC,YAAP,CAAoBX,WAAW,CAACK,KAAZ,IAAqBL,WAAW,CAACM,OAArD,CAA1B;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matches = matches;\nexports.match = match;\nexports.getCharacterFor = getCharacterFor;\n\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @typedef Key\n * @property key {Array<string>|string}\n * @property which {number}\n * @property keyCode {number}\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (matches(event, [keys.Enter, keys.Space]) {\n *     // ...\n *   }\n * }\n *\n * @param {Event} event\n * @param {Array<Key>} keysToMatch\n * @returns {boolean}\n */\nfunction matches(event, keysToMatch) {\n  for (var i = 0; i < keysToMatch.length; i++) {\n    if (match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't used the given event.\n *\n * @example\n * import * as keys from '../keys';\n * import { matches } from '../match';\n *\n * function handleOnKeyDown(event) {\n *   if (match(event, keys.Enter) {\n *     // ...\n *   }\n * }\n *\n * @param {Event|number|string} eventOrCode\n * @param {Key} key\n * @returns {boolean}\n */\n\n\nfunction match(eventOrCode) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      key = _ref.key,\n      which = _ref.which,\n      keyCode = _ref.keyCode;\n\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.indexOf(eventOrCode.key) !== -1;\n  }\n\n  return eventOrCode.key === key || eventOrCode.which === which || eventOrCode.keyCode === keyCode;\n}\n/**\n * Get a string character for a given event or event code (useful for synthetic\n * events)\n *\n * @param {Event|number} eventOrCode\n * @returns {string}\n */\n\n\nfunction getCharacterFor(eventOrCode) {\n  if (typeof eventOrCode === 'number') {\n    return String.fromCharCode(eventOrCode);\n  }\n\n  return eventOrCode.key || String.fromCharCode(eventOrCode.which || eventOrCode.keyCode);\n}"]},"metadata":{},"sourceType":"script"}