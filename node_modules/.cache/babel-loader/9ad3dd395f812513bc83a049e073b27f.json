{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Helper method that can be bound to a stream - it sets the output to utf-8, captures all of the results, and returns a promise that resolves to the final text\n * Essentially a smaller version of concat-stream wrapped in a promise\n *\n * @param {Stream} stream Optional stream param for when not bound to an existing stream instance.\n * @return {Promise}\n */\n\nfunction streamToPromise(stream) {\n  stream = stream || this;\n  return new Promise(function (resolve, reject) {\n    var results = [];\n    stream.on('data', function (result) {\n      results.push(result);\n    }).on('end', function () {\n      resolve(Buffer.isBuffer(results[0]) ? Buffer.concat(results).toString() : results);\n    }).on('error', reject);\n  });\n}\n\nexports.streamToPromise = streamToPromise;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/lib/stream-to-promise.js"],"names":["Object","defineProperty","exports","value","streamToPromise","stream","Promise","resolve","reject","results","on","result","push","Buffer","isBuffer","concat","toString"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AAC7BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,IAAnB;AACA,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,QAAIC,OAAO,GAAG,EAAd;AACAJ,IAAAA,MAAM,CACDK,EADL,CACQ,MADR,EACgB,UAAUC,MAAV,EAAkB;AAC9BF,MAAAA,OAAO,CAACG,IAAR,CAAaD,MAAb;AACH,KAHD,EAIKD,EAJL,CAIQ,KAJR,EAIe,YAAY;AACvBH,MAAAA,OAAO,CAACM,MAAM,CAACC,QAAP,CAAgBL,OAAO,CAAC,CAAD,CAAvB,IACFI,MAAM,CAACE,MAAP,CAAcN,OAAd,EAAuBO,QAAvB,EADE,GAEFP,OAFC,CAAP;AAGH,KARD,EASKC,EATL,CASQ,OATR,EASiBF,MATjB;AAUH,GAZM,CAAP;AAaH;;AACDN,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Helper method that can be bound to a stream - it sets the output to utf-8, captures all of the results, and returns a promise that resolves to the final text\n * Essentially a smaller version of concat-stream wrapped in a promise\n *\n * @param {Stream} stream Optional stream param for when not bound to an existing stream instance.\n * @return {Promise}\n */\nfunction streamToPromise(stream) {\n    stream = stream || this;\n    return new Promise(function (resolve, reject) {\n        var results = [];\n        stream\n            .on('data', function (result) {\n            results.push(result);\n        })\n            .on('end', function () {\n            resolve(Buffer.isBuffer(results[0])\n                ? Buffer.concat(results).toString()\n                : results);\n        })\n            .on('error', reject);\n    });\n}\nexports.streamToPromise = streamToPromise;\n"]},"metadata":{},"sourceType":"script"}