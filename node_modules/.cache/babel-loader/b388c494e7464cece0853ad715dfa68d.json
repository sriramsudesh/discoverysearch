{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extend = require(\"extend\");\n\nvar logger_1 = require(\"../../lib/logger\");\n\nvar utils_1 = require(\"../utils\");\n\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\n/**\n * Check for only one of two elements being defined.\n * Returns true if a is defined and b is undefined,\n * or vice versa. Returns false if both are defined\n * or both are undefined.\n *\n * @param {any} a - The first object\n * @param {any} b - The second object\n * @returns {boolean}\n */\n\n\nfunction onlyOne(a, b) {\n  return Boolean(a && !b || b && !a);\n}\n\nvar CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the header will not be included.';\nvar SCOPE = 'scope';\n/**\n * The IAMTokenManager takes an api key and performs the necessary interactions with\n * the IAM token service to obtain and store a suitable bearer token. Additionally, the IAMTokenManager\n * will retrieve bearer tokens via basic auth using a supplied `clientId` and `clientSecret` pair.\n */\n\nvar IamTokenManager =\n/** @class */\nfunction (_super) {\n  __extends(IamTokenManager, _super);\n  /**\n   *\n   * Create a new [[IamTokenManager]] instance.\n   *\n   * @param {object} options Configuration options.\n   * @param {string} options.apikey The IAM api key.\n   * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   * @param {string} [url='https://iam.cloud.ibm.com/identity/token'] The IAM endpoint for token requests.\n   * @param {boolean} [options.disableSslVerification] A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not.\n   * @param {object<string, string>} [options.headers] Headers to be sent with every\n   *   outbound HTTP requests to token services.\n   * @constructor\n   */\n\n\n  function IamTokenManager(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.requiredOptions = ['apikey'];\n    utils_1.validateInput(options, _this.requiredOptions);\n    _this.apikey = options.apikey;\n    _this.url = _this.url || 'https://iam.cloud.ibm.com/identity/token';\n\n    if (options.clientId) {\n      _this.clientId = options.clientId;\n    }\n\n    if (options.clientSecret) {\n      _this.clientSecret = options.clientSecret;\n    }\n\n    if (options.scope) {\n      _this.scope = options.scope;\n    }\n\n    if (onlyOne(options.clientId, options.clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n\n    return _this;\n  }\n  /**\n   * Set the IAM `scope` value.\n   * This value is the form parameter to use when fetching the bearer token\n   * from the IAM token server.\n   *\n   * @param {string} scope - A space seperated string that makes up the scope parameter.\n   * @returns {void}\n   */\n\n\n  IamTokenManager.prototype.setScope = function (scope) {\n    this.scope = scope;\n  };\n  /**\n   * Set the IAM `clientId` and `clientSecret` values.\n   * These values are used to compute the Authorization header used\n   * when retrieving the IAM access token.\n   * If these values are not set, no Authorization header will be\n   * set on the request (it is not required).\n   *\n   * @param {string} clientId - The client id.\n   * @param {string} clientSecret - The client secret.\n   * @returns {void}\n   */\n\n\n  IamTokenManager.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n\n    if (onlyOne(clientId, clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n  };\n  /**\n   * Request an IAM token using an API key.\n   *\n   * @returns {Promise}\n   */\n\n\n  IamTokenManager.prototype.requestToken = function () {\n    // these cannot be overwritten\n    var requiredHeaders = {\n      'Content-type': 'application/x-www-form-urlencoded'\n    }; // If both the clientId and secret were specified by the user, then use them.\n\n    if (this.clientId && this.clientSecret) {\n      requiredHeaders.Authorization = utils_1.computeBasicAuthHeader(this.clientId, this.clientSecret);\n    }\n\n    var parameters = {\n      options: {\n        url: this.url,\n        method: 'POST',\n        headers: extend(true, {}, this.headers, requiredHeaders),\n        form: {\n          grant_type: 'urn:ibm:params:oauth:grant-type:apikey',\n          apikey: this.apikey,\n          response_type: 'cloud_iam'\n        },\n        rejectUnauthorized: !this.disableSslVerification\n      }\n    };\n\n    if (this.scope) {\n      parameters.options.form[SCOPE] = this.scope;\n    }\n\n    return this.requestWrapperInstance.sendRequest(parameters);\n  };\n\n  return IamTokenManager;\n}(jwt_token_manager_1.JwtTokenManager);\n\nexports.IamTokenManager = IamTokenManager;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-cloud-sdk-core/auth/token-managers/iam-token-manager.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","extend","require","logger_1","utils_1","jwt_token_manager_1","onlyOne","a","Boolean","CLIENT_ID_SECRET_WARNING","SCOPE","IamTokenManager","_super","options","_this","call","requiredOptions","validateInput","apikey","url","clientId","clientSecret","scope","default","warn","setScope","setClientIdAndSecret","requestToken","requiredHeaders","Authorization","computeBasicAuthHeader","parameters","method","headers","form","grant_type","response_type","rejectUnauthorized","disableSslVerification","requestWrapperInstance","sendRequest","JwtTokenManager"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = require(\"extend\");\nvar logger_1 = require(\"../../lib/logger\");\nvar utils_1 = require(\"../utils\");\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\n/**\n * Check for only one of two elements being defined.\n * Returns true if a is defined and b is undefined,\n * or vice versa. Returns false if both are defined\n * or both are undefined.\n *\n * @param {any} a - The first object\n * @param {any} b - The second object\n * @returns {boolean}\n */\nfunction onlyOne(a, b) {\n    return Boolean((a && !b) || (b && !a));\n}\nvar CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the header will not be included.';\nvar SCOPE = 'scope';\n/**\n * The IAMTokenManager takes an api key and performs the necessary interactions with\n * the IAM token service to obtain and store a suitable bearer token. Additionally, the IAMTokenManager\n * will retrieve bearer tokens via basic auth using a supplied `clientId` and `clientSecret` pair.\n */\nvar IamTokenManager = /** @class */ (function (_super) {\n    __extends(IamTokenManager, _super);\n    /**\n     *\n     * Create a new [[IamTokenManager]] instance.\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.apikey The IAM api key.\n     * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     * @param {string} [url='https://iam.cloud.ibm.com/identity/token'] The IAM endpoint for token requests.\n     * @param {boolean} [options.disableSslVerification] A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not.\n     * @param {object<string, string>} [options.headers] Headers to be sent with every\n     *   outbound HTTP requests to token services.\n     * @constructor\n     */\n    function IamTokenManager(options) {\n        var _this = _super.call(this, options) || this;\n        _this.requiredOptions = ['apikey'];\n        utils_1.validateInput(options, _this.requiredOptions);\n        _this.apikey = options.apikey;\n        _this.url = _this.url || 'https://iam.cloud.ibm.com/identity/token';\n        if (options.clientId) {\n            _this.clientId = options.clientId;\n        }\n        if (options.clientSecret) {\n            _this.clientSecret = options.clientSecret;\n        }\n        if (options.scope) {\n            _this.scope = options.scope;\n        }\n        if (onlyOne(options.clientId, options.clientSecret)) {\n            // tslint:disable-next-line\n            logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n        }\n        return _this;\n    }\n    /**\n     * Set the IAM `scope` value.\n     * This value is the form parameter to use when fetching the bearer token\n     * from the IAM token server.\n     *\n     * @param {string} scope - A space seperated string that makes up the scope parameter.\n     * @returns {void}\n     */\n    IamTokenManager.prototype.setScope = function (scope) {\n        this.scope = scope;\n    };\n    /**\n     * Set the IAM `clientId` and `clientSecret` values.\n     * These values are used to compute the Authorization header used\n     * when retrieving the IAM access token.\n     * If these values are not set, no Authorization header will be\n     * set on the request (it is not required).\n     *\n     * @param {string} clientId - The client id.\n     * @param {string} clientSecret - The client secret.\n     * @returns {void}\n     */\n    IamTokenManager.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        if (onlyOne(clientId, clientSecret)) {\n            // tslint:disable-next-line\n            logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n        }\n    };\n    /**\n     * Request an IAM token using an API key.\n     *\n     * @returns {Promise}\n     */\n    IamTokenManager.prototype.requestToken = function () {\n        // these cannot be overwritten\n        var requiredHeaders = {\n            'Content-type': 'application/x-www-form-urlencoded',\n        };\n        // If both the clientId and secret were specified by the user, then use them.\n        if (this.clientId && this.clientSecret) {\n            requiredHeaders.Authorization = utils_1.computeBasicAuthHeader(this.clientId, this.clientSecret);\n        }\n        var parameters = {\n            options: {\n                url: this.url,\n                method: 'POST',\n                headers: extend(true, {}, this.headers, requiredHeaders),\n                form: {\n                    grant_type: 'urn:ibm:params:oauth:grant-type:apikey',\n                    apikey: this.apikey,\n                    response_type: 'cloud_iam'\n                },\n                rejectUnauthorized: !this.disableSslVerification,\n            }\n        };\n        if (this.scope) {\n            parameters.options.form[SCOPE] = this.scope;\n        }\n        return this.requestWrapperInstance.sendRequest(parameters);\n    };\n    return IamTokenManager;\n}(jwt_token_manager_1.JwtTokenManager));\nexports.IamTokenManager = IamTokenManager;\n"]},"metadata":{},"sourceType":"script"}