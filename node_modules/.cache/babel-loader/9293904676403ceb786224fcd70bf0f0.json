{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar utils = require('./utils');\n\nmodule.exports = function (ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var stringify = function stringify(node) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    var invalidNode = node.invalid === true && options.escapeInvalid === true;\n    var output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      var _iterator = _createForOfIteratorHelper(node.nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          output += stringify(child);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return output;\n  };\n\n  return stringify(ast);\n};","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/braces/lib/stringify.js"],"names":["utils","require","module","exports","ast","options","stringify","node","parent","invalidBlock","escapeInvalid","isInvalidBrace","invalidNode","invalid","output","value","isOpenOrClose","nodes","child"],"mappings":"AAAA;;;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAACC,GAAD,EAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACtC,MAAIC,SAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAuB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;AACrC,QAAIC,YAAY,GAAGJ,OAAO,CAACK,aAAR,IAAyBV,KAAK,CAACW,cAAN,CAAqBH,MAArB,CAA5C;AACA,QAAII,WAAW,GAAGL,IAAI,CAACM,OAAL,KAAiB,IAAjB,IAAyBR,OAAO,CAACK,aAAR,KAA0B,IAArE;AACA,QAAII,MAAM,GAAG,EAAb;;AAEA,QAAIP,IAAI,CAACQ,KAAT,EAAgB;AACd,UAAI,CAACN,YAAY,IAAIG,WAAjB,KAAiCZ,KAAK,CAACgB,aAAN,CAAoBT,IAApB,CAArC,EAAgE;AAC9D,eAAO,OAAOA,IAAI,CAACQ,KAAnB;AACD;;AACD,aAAOR,IAAI,CAACQ,KAAZ;AACD;;AAED,QAAIR,IAAI,CAACQ,KAAT,EAAgB;AACd,aAAOR,IAAI,CAACQ,KAAZ;AACD;;AAED,QAAIR,IAAI,CAACU,KAAT,EAAgB;AAAA,iDACIV,IAAI,CAACU,KADT;AAAA;;AAAA;AACd,4DAA8B;AAAA,cAArBC,KAAqB;AAC5BJ,UAAAA,MAAM,IAAIR,SAAS,CAACY,KAAD,CAAnB;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAIf;;AACD,WAAOJ,MAAP;AACD,GAtBD;;AAwBA,SAAOR,SAAS,CAACF,GAAD,CAAhB;AACD,CA1BD","sourcesContent":["'use strict';\n\nconst utils = require('./utils');\n\nmodule.exports = (ast, options = {}) => {\n  let stringify = (node, parent = {}) => {\n    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let output = '';\n\n    if (node.value) {\n      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {\n        return '\\\\' + node.value;\n      }\n      return node.value;\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += stringify(child);\n      }\n    }\n    return output;\n  };\n\n  return stringify(ast);\n};\n\n"]},"metadata":{},"sourceType":"script"}