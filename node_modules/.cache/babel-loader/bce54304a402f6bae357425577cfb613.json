{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\n\n\nvar concatenateRelevantDiffs = function concatenateRelevantDiffs(op, diffs, changeColor) {\n  return diffs.reduce(function (reduced, diff) {\n    return reduced + (diff[0] === _cleanupSemantic.DIFF_EQUAL ? diff[1] : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n    ? changeColor(diff[1]) : '');\n  }, '');\n}; // Encapsulate change lines until either a common newline or the end.\n\n\nvar ChangeBuffer = /*#__PURE__*/function () {\n  // incomplete line\n  // complete lines\n  function ChangeBuffer(op, changeColor) {\n    _classCallCheck(this, ChangeBuffer);\n\n    _defineProperty(this, 'op', void 0);\n\n    _defineProperty(this, 'line', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    _defineProperty(this, 'changeColor', void 0);\n\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n\n  _createClass(ChangeBuffer, [{\n    key: \"pushSubstring\",\n    value: function pushSubstring(substring) {\n      this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n    }\n  }, {\n    key: \"pushLine\",\n    value: function pushLine() {\n      // Assume call only if line has at least one diff,\n      // therefore an empty line must have a diff which has an empty string.\n      // If line has multiple diffs, then assume it has a common diff,\n      // therefore change diffs have change color;\n      // otherwise then it has line color only.\n      this.lines.push(this.line.length !== 1 ? new _cleanupSemantic.Diff(this.op, concatenateRelevantDiffs(this.op, this.line, this.changeColor)) : this.line[0][0] === this.op ? this.line[0] // can use instance\n      : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n      );\n      this.line.length = 0;\n    }\n  }, {\n    key: \"isLineEmpty\",\n    value: function isLineEmpty() {\n      return this.line.length === 0;\n    } // Minor input to buffer.\n\n  }, {\n    key: \"pushDiff\",\n    value: function pushDiff(diff) {\n      this.line.push(diff);\n    } // Main input to buffer.\n\n  }, {\n    key: \"align\",\n    value: function align(diff) {\n      var _this = this;\n\n      var string = diff[1];\n\n      if (string.includes('\\n')) {\n        var substrings = string.split('\\n');\n        var iLast = substrings.length - 1;\n        substrings.forEach(function (substring, i) {\n          if (i < iLast) {\n            // The first substring completes the current change line.\n            // A middle substring is a change line.\n            _this.pushSubstring(substring);\n\n            _this.pushLine();\n          } else if (substring.length !== 0) {\n            // The last substring starts a change line, if it is not empty.\n            // Important: This non-empty condition also automatically omits\n            // the newline appended to the end of expected and received strings.\n            _this.pushSubstring(substring);\n          }\n        });\n      } else {\n        // Append non-multiline string to current change line.\n        this.pushDiff(diff);\n      }\n    } // Output from buffer.\n\n  }, {\n    key: \"moveLinesTo\",\n    value: function moveLinesTo(lines) {\n      if (!this.isLineEmpty()) {\n        this.pushLine();\n      }\n\n      lines.push.apply(lines, _toConsumableArray(this.lines));\n      this.lines.length = 0;\n    }\n  }]);\n\n  return ChangeBuffer;\n}(); // Encapsulate common and change lines.\n\n\nvar CommonBuffer = /*#__PURE__*/function () {\n  function CommonBuffer(deleteBuffer, insertBuffer) {\n    _classCallCheck(this, CommonBuffer);\n\n    _defineProperty(this, 'deleteBuffer', void 0);\n\n    _defineProperty(this, 'insertBuffer', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n\n  _createClass(CommonBuffer, [{\n    key: \"pushDiffCommonLine\",\n    value: function pushDiffCommonLine(diff) {\n      this.lines.push(diff);\n    }\n  }, {\n    key: \"pushDiffChangeLines\",\n    value: function pushDiffChangeLines(diff) {\n      var isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n      if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n        this.deleteBuffer.pushDiff(diff);\n      }\n\n      if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n        this.insertBuffer.pushDiff(diff);\n      }\n    }\n  }, {\n    key: \"flushChangeLines\",\n    value: function flushChangeLines() {\n      this.deleteBuffer.moveLinesTo(this.lines);\n      this.insertBuffer.moveLinesTo(this.lines);\n    } // Input to buffer.\n\n  }, {\n    key: \"align\",\n    value: function align(diff) {\n      var _this2 = this;\n\n      var op = diff[0];\n      var string = diff[1];\n\n      if (string.includes('\\n')) {\n        var substrings = string.split('\\n');\n        var iLast = substrings.length - 1;\n        substrings.forEach(function (substring, i) {\n          if (i === 0) {\n            var subdiff = new _cleanupSemantic.Diff(op, substring);\n\n            if (_this2.deleteBuffer.isLineEmpty() && _this2.insertBuffer.isLineEmpty()) {\n              // If both current change lines are empty,\n              // then the first substring is a common line.\n              _this2.flushChangeLines();\n\n              _this2.pushDiffCommonLine(subdiff);\n            } else {\n              // If either current change line is non-empty,\n              // then the first substring completes the change lines.\n              _this2.pushDiffChangeLines(subdiff);\n\n              _this2.flushChangeLines();\n            }\n          } else if (i < iLast) {\n            // A middle substring is a common line.\n            _this2.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n          } else if (substring.length !== 0) {\n            // The last substring starts a change line, if it is not empty.\n            // Important: This non-empty condition also automatically omits\n            // the newline appended to the end of expected and received strings.\n            _this2.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n          }\n        });\n      } else {\n        // Append non-multiline string to current change lines.\n        // Important: It cannot be at the end following empty change lines,\n        // because newline appended to the end of expected and received strings.\n        this.pushDiffChangeLines(diff);\n      }\n    } // Output from buffer.\n\n  }, {\n    key: \"getLines\",\n    value: function getLines() {\n      this.flushChangeLines();\n      return this.lines;\n    }\n  }]);\n\n  return CommonBuffer;\n}(); // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\n\nvar getAlignedDiffs = function getAlignedDiffs(diffs, changeColor) {\n  var deleteBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_DELETE, changeColor);\n  var insertBuffer = new ChangeBuffer(_cleanupSemantic.DIFF_INSERT, changeColor);\n  var commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(function (diff) {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\n\nvar _default = getAlignedDiffs;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/node_modules/jest-diff/build/getAlignedDiffs.js"],"names":["Object","defineProperty","exports","value","default","_cleanupSemantic","require","_defineProperty","obj","key","enumerable","configurable","writable","concatenateRelevantDiffs","op","diffs","changeColor","reduce","reduced","diff","DIFF_EQUAL","length","ChangeBuffer","line","lines","substring","pushDiff","Diff","push","string","includes","substrings","split","iLast","forEach","i","pushSubstring","pushLine","isLineEmpty","CommonBuffer","deleteBuffer","insertBuffer","isDiffEmpty","moveLinesTo","subdiff","flushChangeLines","pushDiffCommonLine","pushDiffChangeLines","getAlignedDiffs","DIFF_DELETE","DIFF_INSERT","commonBuffer","align","getLines","_default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _cleanupSemantic = require('./cleanupSemantic');\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Given change op and array of diffs, return concatenated string:\n// * include common strings\n// * include change strings which have argument op with changeColor\n// * exclude change strings which have opposite op\nconst concatenateRelevantDiffs = (op, diffs, changeColor) =>\n  diffs.reduce(\n    (reduced, diff) =>\n      reduced +\n      (diff[0] === _cleanupSemantic.DIFF_EQUAL\n        ? diff[1]\n        : diff[0] === op && diff[1].length !== 0 // empty if change is newline\n        ? changeColor(diff[1])\n        : ''),\n    ''\n  ); // Encapsulate change lines until either a common newline or the end.\n\nclass ChangeBuffer {\n  // incomplete line\n  // complete lines\n  constructor(op, changeColor) {\n    _defineProperty(this, 'op', void 0);\n\n    _defineProperty(this, 'line', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    _defineProperty(this, 'changeColor', void 0);\n\n    this.op = op;\n    this.line = [];\n    this.lines = [];\n    this.changeColor = changeColor;\n  }\n\n  pushSubstring(substring) {\n    this.pushDiff(new _cleanupSemantic.Diff(this.op, substring));\n  }\n\n  pushLine() {\n    // Assume call only if line has at least one diff,\n    // therefore an empty line must have a diff which has an empty string.\n    // If line has multiple diffs, then assume it has a common diff,\n    // therefore change diffs have change color;\n    // otherwise then it has line color only.\n    this.lines.push(\n      this.line.length !== 1\n        ? new _cleanupSemantic.Diff(\n            this.op,\n            concatenateRelevantDiffs(this.op, this.line, this.changeColor)\n          )\n        : this.line[0][0] === this.op\n        ? this.line[0] // can use instance\n        : new _cleanupSemantic.Diff(this.op, this.line[0][1]) // was common diff\n    );\n    this.line.length = 0;\n  }\n\n  isLineEmpty() {\n    return this.line.length === 0;\n  } // Minor input to buffer.\n\n  pushDiff(diff) {\n    this.line.push(diff);\n  } // Main input to buffer.\n\n  align(diff) {\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i < iLast) {\n          // The first substring completes the current change line.\n          // A middle substring is a change line.\n          this.pushSubstring(substring);\n          this.pushLine();\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushSubstring(substring);\n        }\n      });\n    } else {\n      // Append non-multiline string to current change line.\n      this.pushDiff(diff);\n    }\n  } // Output from buffer.\n\n  moveLinesTo(lines) {\n    if (!this.isLineEmpty()) {\n      this.pushLine();\n    }\n\n    lines.push(...this.lines);\n    this.lines.length = 0;\n  }\n} // Encapsulate common and change lines.\n\nclass CommonBuffer {\n  constructor(deleteBuffer, insertBuffer) {\n    _defineProperty(this, 'deleteBuffer', void 0);\n\n    _defineProperty(this, 'insertBuffer', void 0);\n\n    _defineProperty(this, 'lines', void 0);\n\n    this.deleteBuffer = deleteBuffer;\n    this.insertBuffer = insertBuffer;\n    this.lines = [];\n  }\n\n  pushDiffCommonLine(diff) {\n    this.lines.push(diff);\n  }\n\n  pushDiffChangeLines(diff) {\n    const isDiffEmpty = diff[1].length === 0; // An empty diff string is redundant, unless a change line is empty.\n\n    if (!isDiffEmpty || this.deleteBuffer.isLineEmpty()) {\n      this.deleteBuffer.pushDiff(diff);\n    }\n\n    if (!isDiffEmpty || this.insertBuffer.isLineEmpty()) {\n      this.insertBuffer.pushDiff(diff);\n    }\n  }\n\n  flushChangeLines() {\n    this.deleteBuffer.moveLinesTo(this.lines);\n    this.insertBuffer.moveLinesTo(this.lines);\n  } // Input to buffer.\n\n  align(diff) {\n    const op = diff[0];\n    const string = diff[1];\n\n    if (string.includes('\\n')) {\n      const substrings = string.split('\\n');\n      const iLast = substrings.length - 1;\n      substrings.forEach((substring, i) => {\n        if (i === 0) {\n          const subdiff = new _cleanupSemantic.Diff(op, substring);\n\n          if (\n            this.deleteBuffer.isLineEmpty() &&\n            this.insertBuffer.isLineEmpty()\n          ) {\n            // If both current change lines are empty,\n            // then the first substring is a common line.\n            this.flushChangeLines();\n            this.pushDiffCommonLine(subdiff);\n          } else {\n            // If either current change line is non-empty,\n            // then the first substring completes the change lines.\n            this.pushDiffChangeLines(subdiff);\n            this.flushChangeLines();\n          }\n        } else if (i < iLast) {\n          // A middle substring is a common line.\n          this.pushDiffCommonLine(new _cleanupSemantic.Diff(op, substring));\n        } else if (substring.length !== 0) {\n          // The last substring starts a change line, if it is not empty.\n          // Important: This non-empty condition also automatically omits\n          // the newline appended to the end of expected and received strings.\n          this.pushDiffChangeLines(new _cleanupSemantic.Diff(op, substring));\n        }\n      });\n    } else {\n      // Append non-multiline string to current change lines.\n      // Important: It cannot be at the end following empty change lines,\n      // because newline appended to the end of expected and received strings.\n      this.pushDiffChangeLines(diff);\n    }\n  } // Output from buffer.\n\n  getLines() {\n    this.flushChangeLines();\n    return this.lines;\n  }\n} // Given diffs from expected and received strings,\n// return new array of diffs split or joined into lines.\n//\n// To correctly align a change line at the end, the algorithm:\n// * assumes that a newline was appended to the strings\n// * omits the last newline from the output array\n//\n// Assume the function is not called:\n// * if either expected or received is empty string\n// * if neither expected nor received is multiline string\n\nconst getAlignedDiffs = (diffs, changeColor) => {\n  const deleteBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_DELETE,\n    changeColor\n  );\n  const insertBuffer = new ChangeBuffer(\n    _cleanupSemantic.DIFF_INSERT,\n    changeColor\n  );\n  const commonBuffer = new CommonBuffer(deleteBuffer, insertBuffer);\n  diffs.forEach(diff => {\n    switch (diff[0]) {\n      case _cleanupSemantic.DIFF_DELETE:\n        deleteBuffer.align(diff);\n        break;\n\n      case _cleanupSemantic.DIFF_INSERT:\n        insertBuffer.align(diff);\n        break;\n\n      default:\n        commonBuffer.align(diff);\n    }\n  });\n  return commonBuffer.getLines();\n};\n\nvar _default = getAlignedDiffs;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}