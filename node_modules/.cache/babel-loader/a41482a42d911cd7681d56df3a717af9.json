{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = require(\"path\"); // This module attempts to identify common content-types based on the filename or header\n// It is not exhaustive, and for best results, you should always manually specify the content-type option.\n// See the complete list of supported content-types at\n// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-input#formats\n// *some* file types can be identified by the first 3-4 bytes of the file\n\n\nvar headerContentTypes = {\n  fLaC: 'audio/flac',\n  RIFF: 'audio/wav',\n  OggS: 'audio/ogg',\n  ID3: 'audio/mp3',\n  '\\u001aEߣ': 'audio/webm' // String for first four hex's of webm: [1A][45][DF][A3] (https://www.matroska.org/technical/specs/index.html#EBML)\n\n};\nvar filenameContentTypes = {\n  '.mp3': 'audio/mp3',\n  '.wav': 'audio/wav',\n  '.flac': 'audio/flac',\n  '.ogg': 'audio/ogg',\n  '.oga': 'audio/ogg',\n  '.opus': 'audio/ogg; codec=opus',\n  '.webm': 'audio/webm'\n};\n/**\n * Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param {Buffer} buffer With at least the first 4 bytes of the file\n * @return {String|undefined} The contentType or undefined\n */\n\nvar fromHeader = function (buffer) {\n  var headerStr = buffer.slice(0, 4).toString().substr(0, 4); // mp3's are only consistent for the first 3 characters\n\n  return headerContentTypes[headerStr] || headerContentTypes[headerStr.substr(0, 3)];\n};\n/**\n * Guess the content type from the filename\n *\n * Note: Blob and File objects include a .type property, but we're ignoring it because it's frequently either\n * incorrect (e.g. video/ogg instead of audio/ogg) or else a different format than what's expected (e.g. audio/x-wav)\n *\n * @param {String|ReadableStream|FileObject|Buffer|File} file String filename or url, or binary File/Blob object.\n * @return {String|undefined}\n */\n\n\nvar fromFilename = function (file) {\n  var ext = path_1.extname(typeof file === 'string' && file || file['name'] || '');\n  return filenameContentTypes[ext];\n};\n\nexports.default = {\n  fromFilename: fromFilename,\n  fromHeader: fromHeader\n};","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-cloud-sdk-core/lib/content-type.js"],"names":["Object","defineProperty","exports","value","path_1","require","headerContentTypes","fLaC","RIFF","OggS","ID3","filenameContentTypes","fromHeader","buffer","headerStr","slice","toString","substr","fromFilename","file","ext","extname","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,kBAAkB,GAAG;AACrBC,EAAAA,IAAI,EAAE,YADe;AAErBC,EAAAA,IAAI,EAAE,WAFe;AAGrBC,EAAAA,IAAI,EAAE,WAHe;AAIrBC,EAAAA,GAAG,EAAE,WAJgB;AAKrB,cAAY,YALS,CAKI;;AALJ,CAAzB;AAOA,IAAIC,oBAAoB,GAAG;AACvB,UAAQ,WADe;AAEvB,UAAQ,WAFe;AAGvB,WAAS,YAHc;AAIvB,UAAQ,WAJe;AAKvB,UAAQ,WALe;AAMvB,WAAS,uBANc;AAOvB,WAAS;AAPc,CAA3B;AASA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAG,UAAUC,MAAV,EAAkB;AAC/B,MAAIC,SAAS,GAAGD,MAAM,CACjBE,KADW,CACL,CADK,EACF,CADE,EAEXC,QAFW,GAGXC,MAHW,CAGJ,CAHI,EAGD,CAHC,CAAhB,CAD+B,CAK/B;;AACA,SAAQX,kBAAkB,CAACQ,SAAD,CAAlB,IAAiCR,kBAAkB,CAACQ,SAAS,CAACG,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAAD,CAA3D;AACH,CAPD;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,YAAY,GAAG,UAAUC,IAAV,EAAgB;AAC/B,MAAIC,GAAG,GAAGhB,MAAM,CAACiB,OAAP,CAAgB,OAAOF,IAAP,KAAgB,QAAhB,IAA4BA,IAA7B,IAAsCA,IAAI,CAAC,MAAD,CAA1C,IAAsD,EAArE,CAAV;AACA,SAAOR,oBAAoB,CAACS,GAAD,CAA3B;AACH,CAHD;;AAIAlB,OAAO,CAACoB,OAAR,GAAkB;AACdJ,EAAAA,YAAY,EAAEA,YADA;AAEdN,EAAAA,UAAU,EAAEA;AAFE,CAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar path_1 = require(\"path\");\n// This module attempts to identify common content-types based on the filename or header\n// It is not exhaustive, and for best results, you should always manually specify the content-type option.\n// See the complete list of supported content-types at\n// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-input#formats\n// *some* file types can be identified by the first 3-4 bytes of the file\nvar headerContentTypes = {\n    fLaC: 'audio/flac',\n    RIFF: 'audio/wav',\n    OggS: 'audio/ogg',\n    ID3: 'audio/mp3',\n    '\\u001aEߣ': 'audio/webm' // String for first four hex's of webm: [1A][45][DF][A3] (https://www.matroska.org/technical/specs/index.html#EBML)\n};\nvar filenameContentTypes = {\n    '.mp3': 'audio/mp3',\n    '.wav': 'audio/wav',\n    '.flac': 'audio/flac',\n    '.ogg': 'audio/ogg',\n    '.oga': 'audio/ogg',\n    '.opus': 'audio/ogg; codec=opus',\n    '.webm': 'audio/webm'\n};\n/**\n * Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param {Buffer} buffer With at least the first 4 bytes of the file\n * @return {String|undefined} The contentType or undefined\n */\nvar fromHeader = function (buffer) {\n    var headerStr = buffer\n        .slice(0, 4)\n        .toString()\n        .substr(0, 4);\n    // mp3's are only consistent for the first 3 characters\n    return (headerContentTypes[headerStr] || headerContentTypes[headerStr.substr(0, 3)]);\n};\n/**\n * Guess the content type from the filename\n *\n * Note: Blob and File objects include a .type property, but we're ignoring it because it's frequently either\n * incorrect (e.g. video/ogg instead of audio/ogg) or else a different format than what's expected (e.g. audio/x-wav)\n *\n * @param {String|ReadableStream|FileObject|Buffer|File} file String filename or url, or binary File/Blob object.\n * @return {String|undefined}\n */\nvar fromFilename = function (file) {\n    var ext = path_1.extname((typeof file === 'string' && file) || file['name'] || '');\n    return filenameContentTypes[ext];\n};\nexports.default = {\n    fromFilename: fromFilename,\n    fromHeader: fromHeader\n};\n"]},"metadata":{},"sourceType":"script"}