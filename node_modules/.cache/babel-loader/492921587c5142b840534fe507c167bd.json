{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _toConsumableArray = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar fill = require('fill-range');\n\nvar utils = require('./utils');\n\nvar compile = function compile(ast) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var walk = function walk(node) {\n    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var invalidBlock = utils.isInvalidBrace(parent);\n    var invalidNode = node.invalid === true && options.escapeInvalid === true;\n    var invalid = invalidBlock === true || invalidNode === true;\n    var prefix = options.escapeInvalid === true ? '\\\\' : '';\n    var output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n\n    if (node.isClose === true) {\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? prefix + node.value : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? prefix + node.value : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : invalid ? node.value : '|';\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      var args = utils.reduce(node.nodes);\n      var range = fill.apply(void 0, _toConsumableArray(args).concat([_objectSpread(_objectSpread({}, options), {}, {\n        wrap: false,\n        toRegex: true\n      })]));\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? \"(\".concat(range, \")\") : range;\n      }\n    }\n\n    if (node.nodes) {\n      var _iterator = _createForOfIteratorHelper(node.nodes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          output += walk(child, node);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/braces/lib/compile.js"],"names":["fill","require","utils","compile","ast","options","walk","node","parent","invalidBlock","isInvalidBrace","invalidNode","invalid","escapeInvalid","prefix","output","isOpen","value","isClose","type","prev","nodes","ranges","args","reduce","range","wrap","toRegex","length","child","module","exports"],"mappings":"AAAA;;;;;;;;AAEA,IAAMA,IAAI,GAAGC,OAAO,CAAC,YAAD,CAApB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAuB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AACrC,MAAIC,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAuB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;AAChC,QAAIC,YAAY,GAAGP,KAAK,CAACQ,cAAN,CAAqBF,MAArB,CAAnB;AACA,QAAIG,WAAW,GAAGJ,IAAI,CAACK,OAAL,KAAiB,IAAjB,IAAyBP,OAAO,CAACQ,aAAR,KAA0B,IAArE;AACA,QAAID,OAAO,GAAGH,YAAY,KAAK,IAAjB,IAAyBE,WAAW,KAAK,IAAvD;AACA,QAAIG,MAAM,GAAGT,OAAO,CAACQ,aAAR,KAA0B,IAA1B,GAAiC,IAAjC,GAAwC,EAArD;AACA,QAAIE,MAAM,GAAG,EAAb;;AAEA,QAAIR,IAAI,CAACS,MAAL,KAAgB,IAApB,EAA0B;AACxB,aAAOF,MAAM,GAAGP,IAAI,CAACU,KAArB;AACD;;AACD,QAAIV,IAAI,CAACW,OAAL,KAAiB,IAArB,EAA2B;AACzB,aAAOJ,MAAM,GAAGP,IAAI,CAACU,KAArB;AACD;;AAED,QAAIV,IAAI,CAACY,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOP,OAAO,GAAIE,MAAM,GAAGP,IAAI,CAACU,KAAlB,GAA2B,GAAzC;AACD;;AAED,QAAIV,IAAI,CAACY,IAAL,KAAc,OAAlB,EAA2B;AACzB,aAAOP,OAAO,GAAIE,MAAM,GAAGP,IAAI,CAACU,KAAlB,GAA2B,GAAzC;AACD;;AAED,QAAIV,IAAI,CAACY,IAAL,KAAc,OAAlB,EAA2B;AACzB,aAAOZ,IAAI,CAACa,IAAL,CAAUD,IAAV,KAAmB,OAAnB,GAA6B,EAA7B,GAAmCP,OAAO,GAAGL,IAAI,CAACU,KAAR,GAAgB,GAAjE;AACD;;AAED,QAAIV,IAAI,CAACU,KAAT,EAAgB;AACd,aAAOV,IAAI,CAACU,KAAZ;AACD;;AAED,QAAIV,IAAI,CAACc,KAAL,IAAcd,IAAI,CAACe,MAAL,GAAc,CAAhC,EAAmC;AACjC,UAAIC,IAAI,GAAGrB,KAAK,CAACsB,MAAN,CAAajB,IAAI,CAACc,KAAlB,CAAX;AACA,UAAII,KAAK,GAAGzB,IAAI,MAAJ,4BAAQuB,IAAR,0CAAmBlB,OAAnB;AAA4BqB,QAAAA,IAAI,EAAE,KAAlC;AAAyCC,QAAAA,OAAO,EAAE;AAAlD,WAAZ;;AAEA,UAAIF,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,eAAOL,IAAI,CAACK,MAAL,GAAc,CAAd,IAAmBH,KAAK,CAACG,MAAN,GAAe,CAAlC,cAA0CH,KAA1C,SAAqDA,KAA5D;AACD;AACF;;AAED,QAAIlB,IAAI,CAACc,KAAT,EAAgB;AAAA,iDACId,IAAI,CAACc,KADT;AAAA;;AAAA;AACd,4DAA8B;AAAA,cAArBQ,KAAqB;AAC5Bd,UAAAA,MAAM,IAAIT,IAAI,CAACuB,KAAD,EAAQtB,IAAR,CAAd;AACD;AAHa;AAAA;AAAA;AAAA;AAAA;AAIf;;AACD,WAAOQ,MAAP;AACD,GA7CD;;AA+CA,SAAOT,IAAI,CAACF,GAAD,CAAX;AACD,CAjDD;;AAmDA0B,MAAM,CAACC,OAAP,GAAiB5B,OAAjB","sourcesContent":["'use strict';\n\nconst fill = require('fill-range');\nconst utils = require('./utils');\n\nconst compile = (ast, options = {}) => {\n  let walk = (node, parent = {}) => {\n    let invalidBlock = utils.isInvalidBrace(parent);\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\n    let invalid = invalidBlock === true || invalidNode === true;\n    let prefix = options.escapeInvalid === true ? '\\\\' : '';\n    let output = '';\n\n    if (node.isOpen === true) {\n      return prefix + node.value;\n    }\n    if (node.isClose === true) {\n      return prefix + node.value;\n    }\n\n    if (node.type === 'open') {\n      return invalid ? (prefix + node.value) : '(';\n    }\n\n    if (node.type === 'close') {\n      return invalid ? (prefix + node.value) : ')';\n    }\n\n    if (node.type === 'comma') {\n      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');\n    }\n\n    if (node.value) {\n      return node.value;\n    }\n\n    if (node.nodes && node.ranges > 0) {\n      let args = utils.reduce(node.nodes);\n      let range = fill(...args, { ...options, wrap: false, toRegex: true });\n\n      if (range.length !== 0) {\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\n      }\n    }\n\n    if (node.nodes) {\n      for (let child of node.nodes) {\n        output += walk(child, node);\n      }\n    }\n    return output;\n  };\n\n  return walk(ast);\n};\n\nmodule.exports = compile;\n"]},"metadata":{},"sourceType":"script"}