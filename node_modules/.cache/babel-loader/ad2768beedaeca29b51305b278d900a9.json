{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar token_managers_1 = require(\"../token-managers\");\n\nvar utils_1 = require(\"../utils\");\n\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The [[IamAuthenticator]] will use the user-supplied `apikey`\n * values to obtain a bearer token from a token server.  When the bearer token\n * expires, a new token is obtained from the token server. If specified, the\n * optional, mutually inclusive `clientId` and`clientSecret` pair can be used to\n * influence rate-limiting for requests to the IAM token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\n\n\nvar IamAuthenticator =\n/** @class */\nfunction (_super) {\n  __extends(IamAuthenticator, _super);\n  /**\n   *\n   * Create a new [[IamAuthenticator]] instance.\n   *\n   * @param {object} options Configuration options for IAM authentication.\n   * @param {boolean} options.disableSslVerification A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not\n   * @param {string} options.url for HTTP token requests.\n   * @param {object<string, string>} options.headers to be sent with every\n   * @param {string} options.apikey The IAM api key.\n   * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   * @param {string} [options.scope] The \"scope\" parameter to use when fetching the bearer token from the\n   *   IAM token server.\n   * @throws {Error} When the configuration options are not valid.\n   */\n\n\n  function IamAuthenticator(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.requiredOptions = ['apikey'];\n    utils_1.validateInput(options, _this.requiredOptions);\n    _this.apikey = options.apikey;\n    _this.clientId = options.clientId;\n    _this.clientSecret = options.clientSecret;\n    _this.scope = options.scope; // the param names are shared between the authenticator and the token\n    // manager so we can just pass along the options object\n\n    _this.tokenManager = new token_managers_1.IamTokenManager(options);\n    return _this;\n  }\n  /**\n   * Setter for the mutually inclusive `clientId` and the `clientSecret`.\n   * @param {string} clientId The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   * @param {string} clientSecret The `clientId` and `clientSecret` fields are used to form a \"basic\"\n   *   authorization header for IAM token requests.\n   */\n\n\n  IamAuthenticator.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret; // update properties in token manager\n\n    this.tokenManager.setClientIdAndSecret(clientId, clientSecret);\n  };\n  /**\n   * Setter for the \"scope\" parameter to use when fetching the bearer token from the IAM token server.\n   * @param {string} scope A space seperated string that makes up the scope parameter\n   */\n\n\n  IamAuthenticator.prototype.setScope = function (scope) {\n    this.scope = scope; // update properties in token manager\n\n    this.tokenManager.setScope(scope);\n  };\n\n  return IamAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator);\n\nexports.IamAuthenticator = IamAuthenticator;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/auth/authenticators/iam-authenticator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","token_managers_1","require","utils_1","token_request_based_authenticator_1","IamAuthenticator","_super","options","_this","call","requiredOptions","validateInput","apikey","clientId","clientSecret","scope","tokenManager","IamTokenManager","setClientIdAndSecret","setScope","TokenRequestBasedAuthenticator"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar token_managers_1 = require(\"../token-managers\");\nvar utils_1 = require(\"../utils\");\nvar token_request_based_authenticator_1 = require(\"./token-request-based-authenticator\");\n/**\n * The [[IamAuthenticator]] will use the user-supplied `apikey`\n * values to obtain a bearer token from a token server.  When the bearer token\n * expires, a new token is obtained from the token server. If specified, the\n * optional, mutually inclusive `clientId` and`clientSecret` pair can be used to\n * influence rate-limiting for requests to the IAM token server.\n *\n * The bearer token will be sent as an Authorization header in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\nvar IamAuthenticator = /** @class */ (function (_super) {\n    __extends(IamAuthenticator, _super);\n    /**\n     *\n     * Create a new [[IamAuthenticator]] instance.\n     *\n     * @param {object} options Configuration options for IAM authentication.\n     * @param {boolean} options.disableSslVerification A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not\n     * @param {string} options.url for HTTP token requests.\n     * @param {object<string, string>} options.headers to be sent with every\n     * @param {string} options.apikey The IAM api key.\n     * @param {string} [options.clientId] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     * @param {string} [options.clientSecret] The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     * @param {string} [options.scope] The \"scope\" parameter to use when fetching the bearer token from the\n     *   IAM token server.\n     * @throws {Error} When the configuration options are not valid.\n     */\n    function IamAuthenticator(options) {\n        var _this = _super.call(this, options) || this;\n        _this.requiredOptions = ['apikey'];\n        utils_1.validateInput(options, _this.requiredOptions);\n        _this.apikey = options.apikey;\n        _this.clientId = options.clientId;\n        _this.clientSecret = options.clientSecret;\n        _this.scope = options.scope;\n        // the param names are shared between the authenticator and the token\n        // manager so we can just pass along the options object\n        _this.tokenManager = new token_managers_1.IamTokenManager(options);\n        return _this;\n    }\n    /**\n     * Setter for the mutually inclusive `clientId` and the `clientSecret`.\n     * @param {string} clientId The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     * @param {string} clientSecret The `clientId` and `clientSecret` fields are used to form a \"basic\"\n     *   authorization header for IAM token requests.\n     */\n    IamAuthenticator.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        // update properties in token manager\n        this.tokenManager.setClientIdAndSecret(clientId, clientSecret);\n    };\n    /**\n     * Setter for the \"scope\" parameter to use when fetching the bearer token from the IAM token server.\n     * @param {string} scope A space seperated string that makes up the scope parameter\n     */\n    IamAuthenticator.prototype.setScope = function (scope) {\n        this.scope = scope;\n        // update properties in token manager\n        this.tokenManager.setScope(scope);\n    };\n    return IamAuthenticator;\n}(token_request_based_authenticator_1.TokenRequestBasedAuthenticator));\nexports.IamAuthenticator = IamAuthenticator;\n"]},"metadata":{},"sourceType":"script"}