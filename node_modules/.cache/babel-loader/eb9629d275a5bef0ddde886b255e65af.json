{"ast":null,"code":"\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 2020.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432\n */\n\n\nvar extend = require(\"extend\");\n\nvar ibm_cloud_sdk_core_1 = require(\"ibm-cloud-sdk-core\");\n\nvar common_1 = require(\"../lib/common\");\n/**\n * IBM Watson&trade; Discovery is a cognitive search and content analytics engine that you can add to applications to\n * identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and\n * unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual\n * filtering of results.\n */\n\n\nvar DiscoveryV2 =\n/** @class */\nfunction (_super) {\n  __extends(DiscoveryV2, _super);\n  /**\n   * Construct a DiscoveryV2 object.\n   *\n   * @param {Object} options - Options for the service.\n   * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in\n   * YYYY-MM-DD format. The current version is `2019-11-22`.\n   * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.discovery.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.\n   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.\n   * @param {string} [options.serviceName] - The name of the service to configure\n   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set\n   * @constructor\n   * @returns {DiscoveryV2}\n   */\n\n\n  function DiscoveryV2(options) {\n    var _this = this;\n\n    options = options || {};\n    var requiredParams = ['version'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);\n\n    if (missingParams) {\n      throw missingParams;\n    }\n\n    if (!options.serviceName) {\n      options.serviceName = DiscoveryV2.DEFAULT_SERVICE_NAME;\n    } // If the caller didn't supply an authenticator, construct one from external configuration.\n\n\n    if (!options.authenticator) {\n      options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);\n    }\n\n    _this = _super.call(this, options) || this;\n\n    _this.configureService(options.serviceName);\n\n    if (options.serviceUrl) {\n      _this.setServiceUrl(options.serviceUrl);\n    }\n\n    _this.version = options.version;\n    return _this;\n  }\n  /*************************\n   * collections\n   ************************/\n\n  /**\n   * List collections.\n   *\n   * Lists existing collections for the specified project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListCollectionsResponse>>}\n   */\n\n\n  DiscoveryV2.prototype.listCollections = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listCollections');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Create a collection.\n   *\n   * Create a new collection in the specified project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.name - The name of the collection.\n   * @param {string} [params.description] - A description of the collection.\n   * @param {string} [params.language] - The language of the collection.\n   * @param {CollectionEnrichment[]} [params.enrichments] - An array of enrichments that are applied to this collection.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n   */\n\n  DiscoveryV2.prototype.createCollection = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'name'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'name': _params.name,\n      'description': _params.description,\n      'language': _params.language,\n      'enrichments': _params.enrichments\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createCollection');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Get collection.\n   *\n   * Get details about the specified collection.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n   */\n\n  DiscoveryV2.prototype.getCollection = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getCollection');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Update a collection.\n   *\n   * Updates the specified collection's name, description, and enrichments.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {string} [params.name] - The name of the collection.\n   * @param {string} [params.description] - A description of the collection.\n   * @param {CollectionEnrichment[]} [params.enrichments] - An array of enrichments that are applied to this collection.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n   */\n\n  DiscoveryV2.prototype.updateCollection = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'name': _params.name,\n      'description': _params.description,\n      'enrichments': _params.enrichments\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateCollection');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Delete a collection.\n   *\n   * Deletes the specified collection from the project. All documents stored in the specified collection and not shared\n   * is also deleted.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n   */\n\n  DiscoveryV2.prototype.deleteCollection = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteCollection');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}',\n        method: 'DELETE',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {}, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * queries\n   ************************/\n\n  /**\n   * Query a project.\n   *\n   * By using this method, you can construct queries. For details, see the [Discovery\n   * documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-query-concepts). The default query\n   * parameters are defined by the settings for this project, see the [Discovery\n   * documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-project-defaults) for an overview of\n   * the standard default settings, and see [the Projects API documentation](#create-project) for details about how to\n   * set custom default query settings.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string[]} [params.collectionIds] - A comma-separated list of collection IDs to be queried against.\n   * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.\n   * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.\n   * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and\n   * full text, but with the most relevant documents listed first. Use a query search when you want to find the most\n   * relevant search results.\n   * @param {string} [params.naturalLanguageQuery] - A natural language query that returns relevant documents by\n   * utilizing training data and natural language understanding.\n   * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search\n   * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible\n   * aggregations, see the Query reference.\n   * @param {number} [params.count] - Number of results to return.\n   * @param {string[]} [params._return] - A list of the fields in the document hierarchy to return. If this parameter\n   * not specified, then all top-level fields are returned.\n   * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total\n   * number of results that are returned is 10 and the offset is 8, it returns the last two results.\n   * @param {string} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally\n   * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the\n   * default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias**\n   * parameter.\n   * @param {boolean} [params.highlight] - When `true`, a highlight field is returned for each result which contains the\n   * fields which match the query with `<em></em>` tags around the matching query terms.\n   * @param {boolean} [params.spellingSuggestions] - When `true` and the **natural_language_query** parameter is used,\n   * the **natural_language_query** parameter is spell checked. The most likely correction is returned in the\n   * **suggested_query** field of the response (if one exists).\n   * @param {QueryLargeTableResults} [params.tableResults] - Configuration for table retrieval.\n   * @param {QueryLargeSuggestedRefinements} [params.suggestedRefinements] - Configuration for suggested refinements.\n   * @param {QueryLargePassages} [params.passages] - Configuration for passage retrieval.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.QueryResponse>>}\n   */\n\n  DiscoveryV2.prototype.query = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'collection_ids': _params.collectionIds,\n      'filter': _params.filter,\n      'query': _params.query,\n      'natural_language_query': _params.naturalLanguageQuery,\n      'aggregation': _params.aggregation,\n      'count': _params.count,\n      'return': _params._return,\n      'offset': _params.offset,\n      'sort': _params.sort,\n      'highlight': _params.highlight,\n      'spelling_suggestions': _params.spellingSuggestions,\n      'table_results': _params.tableResults,\n      'suggested_refinements': _params.suggestedRefinements,\n      'passages': _params.passages\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'query');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/query',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Get Autocomplete Suggestions.\n   *\n   * Returns completion query suggestions for the specified prefix.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.prefix - The prefix to use for autocompletion. For example, the prefix `Ho` could\n   * autocomplete to `Hot`, `Housing`, or `How do I upgrade`. Possible completions are.\n   * @param {string[]} [params.collectionIds] - Comma separated list of the collection IDs. If this parameter is not\n   * specified, all collections in the project are used.\n   * @param {string} [params.field] - The field in the result documents that autocompletion suggestions are identified\n   * from.\n   * @param {number} [params.count] - The number of autocompletion suggestions to return.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Completions>>}\n   */\n\n  DiscoveryV2.prototype.getAutocompletion = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'prefix'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version,\n      'prefix': _params.prefix,\n      'collection_ids': _params.collectionIds,\n      'field': _params.field,\n      'count': _params.count\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getAutocompletion');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/autocompletion',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Query system notices.\n   *\n   * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when\n   * ingesting documents and performing relevance training.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.\n   * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.\n   * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and\n   * full text, but with the most relevant documents listed first.\n   * @param {string} [params.naturalLanguageQuery] - A natural language query that returns relevant documents by\n   * utilizing training data and natural language understanding.\n   * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values\n   * together in any one query is **10000**.\n   * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total\n   * number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the\n   * **count** and **offset** values together in any one query is **10000**.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.QueryNoticesResponse>>}\n   */\n\n  DiscoveryV2.prototype.queryNotices = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version,\n      'filter': _params.filter,\n      'query': _params.query,\n      'natural_language_query': _params.naturalLanguageQuery,\n      'count': _params.count,\n      'offset': _params.offset\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'queryNotices');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/notices',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * List fields.\n   *\n   * Gets a list of the unique fields (and their types) stored in the the specified collections.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string[]} [params.collectionIds] - Comma separated list of the collection IDs. If this parameter is not\n   * specified, all collections in the project are used.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListFieldsResponse>>}\n   */\n\n  DiscoveryV2.prototype.listFields = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version,\n      'collection_ids': _params.collectionIds\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listFields');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/fields',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * componentSettings\n   ************************/\n\n  /**\n   * List component settings.\n   *\n   * Returns default configuration settings for components.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ComponentSettingsResponse>>}\n   */\n\n  DiscoveryV2.prototype.getComponentSettings = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getComponentSettings');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/component_settings',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * documents\n   ************************/\n\n  /**\n   * Add a document.\n   *\n   * Add a document to a collection with optional metadata.\n   *\n   *  Returns immediately after the system has accepted the document for processing.\n   *\n   *   * The user must provide document content, metadata, or both. If the request is missing both document content and\n   * metadata, it is rejected.\n   *\n   *   * The user can set the **Content-Type** parameter on the **file** part to indicate the media type of the\n   * document. If the **Content-Type** parameter is missing or is one of the generic media types (for example,\n   * `application/octet-stream`), then the service attempts to automatically detect the document's media type.\n   *\n   *   * The following field names are reserved and will be filtered out if present after normalization: `id`, `score`,\n   * `highlight`, and any field with the prefix of: `_`, `+`, or `-`\n   *\n   *   * Fields with empty name values after normalization are filtered out before indexing.\n   *\n   *   * Fields containing the following characters after normalization are filtered out before indexing: `#` and `,`\n   *\n   *   If the document is uploaded to a collection that has it's data shared with another collection, the\n   * **X-Watson-Discovery-Force** header must be set to `true`.\n   *\n   *  **Note:** Documents can be added with a specific **document_id** by using the\n   * **_/v2/projects/{project_id}/collections/{collection_id}/documents** method.\n   *\n   * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n   * modify a collection that connects to an external source such as Microsoft SharePoint.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n   * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n   * configuration is 1 megabyte. Files larger than the supported size are rejected.\n   * @param {string} [params.filename] - The filename for file.\n   * @param {string} [params.fileContentType] - The content type of file.\n   * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n   * MB are rejected.\n   *\n   *\n   * Example:  ``` {\n   *   \"Creator\": \"Johnny Appleseed\",\n   *   \"Subject\": \"Apples\"\n   * } ```.\n   * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n   * even if the data for that collection is shared with other collections.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DocumentAccepted>>}\n   */\n\n  DiscoveryV2.prototype.addDocument = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var formData = {\n      'file': {\n        data: _params.file,\n        filename: _params.filename,\n        contentType: _params.fileContentType\n      },\n      'metadata': _params.metadata\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'addDocument');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}/documents',\n        method: 'POST',\n        qs: query,\n        path: path,\n        formData: formData\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data',\n          'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Update a document.\n   *\n   * Replace an existing document or add a document with a specified **document_id**. Starts ingesting a document with\n   * optional metadata.\n   *\n   * If the document is uploaded to a collection that has it's data shared with another collection, the\n   * **X-Watson-Discovery-Force** header must be set to `true`.\n   *\n   * **Note:** When uploading a new document with this method it automatically replaces any document stored with the\n   * same **document_id** if it exists.\n   *\n   * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n   * modify a collection that connects to an external source such as Microsoft SharePoint.\n   *\n   * **Note:** If an uploaded document is segmented, all segments will be overwritten, even if the updated version of\n   * the document has fewer segments.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {string} params.documentId - The ID of the document.\n   * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n   * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n   * configuration is 1 megabyte. Files larger than the supported size are rejected.\n   * @param {string} [params.filename] - The filename for file.\n   * @param {string} [params.fileContentType] - The content type of file.\n   * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n   * MB are rejected.\n   *\n   *\n   * Example:  ``` {\n   *   \"Creator\": \"Johnny Appleseed\",\n   *   \"Subject\": \"Apples\"\n   * } ```.\n   * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n   * even if the data for that collection is shared with other collections.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DocumentAccepted>>}\n   */\n\n  DiscoveryV2.prototype.updateDocument = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId', 'documentId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var formData = {\n      'file': {\n        data: _params.file,\n        filename: _params.filename,\n        contentType: _params.fileContentType\n      },\n      'metadata': _params.metadata\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId,\n      'document_id': _params.documentId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateDocument');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}',\n        method: 'POST',\n        qs: query,\n        path: path,\n        formData: formData\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data',\n          'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Delete a document.\n   *\n   * If the given document ID is invalid, or if the document is not found, then the a success response is returned (HTTP\n   * status code `200`) with the status set to 'deleted'.\n   *\n   * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n   * modify a collection that connects to an external source such as Microsoft SharePoint.\n   *\n   * **Note:** Segments of an uploaded document cannot be deleted individually. Delete all segments by deleting using\n   * the `parent_document_id` of a segment result.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {string} params.documentId - The ID of the document.\n   * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n   * even if the data for that collection is shared with other collections.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DeleteDocumentResponse>>}\n   */\n\n  DiscoveryV2.prototype.deleteDocument = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId', 'documentId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId,\n      'document_id': _params.documentId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteDocument');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}',\n        method: 'DELETE',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * trainingData\n   ************************/\n\n  /**\n   * List training queries.\n   *\n   * List the training queries for the specified project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuerySet>>}\n   */\n\n  DiscoveryV2.prototype.listTrainingQueries = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listTrainingQueries');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/training_data/queries',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Delete training queries.\n   *\n   * Removes all training queries for the specified project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n   */\n\n  DiscoveryV2.prototype.deleteTrainingQueries = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteTrainingQueries');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/training_data/queries',\n        method: 'DELETE',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {}, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Create training query.\n   *\n   * Add a query to the training data for this project. The query can contain a filter and natural language query.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.naturalLanguageQuery - The natural text query for the training query.\n   * @param {TrainingExample[]} params.examples - Array of training examples.\n   * @param {string} [params.filter] - The filter used on the collection before the **natural_language_query** is\n   * applied.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n   */\n\n  DiscoveryV2.prototype.createTrainingQuery = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'naturalLanguageQuery', 'examples'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'natural_language_query': _params.naturalLanguageQuery,\n      'examples': _params.examples,\n      'filter': _params.filter\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createTrainingQuery');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/training_data/queries',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Get a training data query.\n   *\n   * Get details for a specific training data query, including the query string and all examples.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.queryId - The ID of the query used for training.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n   */\n\n  DiscoveryV2.prototype.getTrainingQuery = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'queryId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'query_id': _params.queryId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getTrainingQuery');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/training_data/queries/{query_id}',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Update a training query.\n   *\n   * Updates an existing training query and it's examples.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.queryId - The ID of the query used for training.\n   * @param {string} params.naturalLanguageQuery - The natural text query for the training query.\n   * @param {TrainingExample[]} params.examples - Array of training examples.\n   * @param {string} [params.filter] - The filter used on the collection before the **natural_language_query** is\n   * applied.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n   */\n\n  DiscoveryV2.prototype.updateTrainingQuery = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'queryId', 'naturalLanguageQuery', 'examples'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'natural_language_query': _params.naturalLanguageQuery,\n      'examples': _params.examples,\n      'filter': _params.filter\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'query_id': _params.queryId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateTrainingQuery');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/training_data/queries/{query_id}',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * analyze\n   ************************/\n\n  /**\n   * Analyze a Document.\n   *\n   * Process a document using the specified collection's settings and return it for realtime use.\n   *\n   * **Note:** Documents processed using this method are not added to the specified collection.\n   *\n   * **Note:** This method is only supported on IBM Cloud Pak for Data instances of Discovery.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.collectionId - The ID of the collection.\n   * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n   * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n   * configuration is 1 megabyte. Files larger than the supported size are rejected.\n   * @param {string} [params.filename] - The filename for file.\n   * @param {string} [params.fileContentType] - The content type of file.\n   * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n   * MB are rejected.\n   *\n   *\n   * Example:  ``` {\n   *   \"Creator\": \"Johnny Appleseed\",\n   *   \"Subject\": \"Apples\"\n   * } ```.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.AnalyzedDocument>>}\n   */\n\n  DiscoveryV2.prototype.analyzeDocument = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'collectionId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var formData = {\n      'file': {\n        data: _params.file,\n        filename: _params.filename,\n        contentType: _params.fileContentType\n      },\n      'metadata': _params.metadata\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'collection_id': _params.collectionId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'analyzeDocument');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/collections/{collection_id}/analyze',\n        method: 'POST',\n        qs: query,\n        path: path,\n        formData: formData\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * enrichments\n   ************************/\n\n  /**\n   * List Enrichments.\n   *\n   * List the enrichments available to this project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichments>>}\n   */\n\n  DiscoveryV2.prototype.listEnrichments = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listEnrichments');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/enrichments',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Create an enrichment.\n   *\n   * Create an enrichment for use with the specified project/.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {CreateEnrichment} params.enrichment -\n   * @param {NodeJS.ReadableStream|Buffer} [params.file] - The enrichment file to upload.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n   */\n\n  DiscoveryV2.prototype.createEnrichment = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'enrichment'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var formData = {\n      'enrichment': _params.enrichment,\n      'file': {\n        data: _params.file,\n        contentType: 'application/octet-stream'\n      }\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createEnrichment');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/enrichments',\n        method: 'POST',\n        qs: query,\n        path: path,\n        formData: formData\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'multipart/form-data'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Get enrichment.\n   *\n   * Get details about a specific enrichment.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.enrichmentId - The ID of the enrichment.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n   */\n\n  DiscoveryV2.prototype.getEnrichment = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'enrichmentId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'enrichment_id': _params.enrichmentId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getEnrichment');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Update an enrichment.\n   *\n   * Updates an existing enrichment's name and description.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.enrichmentId - The ID of the enrichment.\n   * @param {string} params.name - A new name for the enrichment.\n   * @param {string} [params.description] - A new description for the enrichment.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n   */\n\n  DiscoveryV2.prototype.updateEnrichment = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'enrichmentId', 'name'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'name': _params.name,\n      'description': _params.description\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'enrichment_id': _params.enrichmentId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateEnrichment');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Delete an enrichment.\n   *\n   * Deletes an existing enrichment from the specified project.\n   *\n   * **Note:** Only enrichments that have been manually created can be deleted.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} params.enrichmentId - The ID of the enrichment.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n   */\n\n  DiscoveryV2.prototype.deleteEnrichment = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId', 'enrichmentId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId,\n      'enrichment_id': _params.enrichmentId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteEnrichment');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n        method: 'DELETE',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {}, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * projects\n   ************************/\n\n  /**\n   * List projects.\n   *\n   * Lists existing projects for this instance.\n   *\n   * @param {Object} [params] - The parameters to send to the service.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListProjectsResponse>>}\n   */\n\n  DiscoveryV2.prototype.listProjects = function (params) {\n    var _params = Object.assign({}, params);\n\n    var query = {\n      'version': this.version\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listProjects');\n    var parameters = {\n      options: {\n        url: '/v2/projects',\n        method: 'GET',\n        qs: query\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Create a Project.\n   *\n   * Create a new project for this instance.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.name - The human readable name of this project.\n   * @param {string} params.type - The project type of this project.\n   * @param {DefaultQueryParams} [params.defaultQueryParameters] - Default query parameters for this project.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n   */\n\n  DiscoveryV2.prototype.createProject = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['name', 'type'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'name': _params.name,\n      'type': _params.type,\n      'default_query_parameters': _params.defaultQueryParameters\n    };\n    var query = {\n      'version': this.version\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createProject');\n    var parameters = {\n      options: {\n        url: '/v2/projects',\n        method: 'POST',\n        body: body,\n        qs: query\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Get project.\n   *\n   * Get details on the specified project.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n   */\n\n  DiscoveryV2.prototype.getProject = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getProject');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}',\n        method: 'GET',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Update a project.\n   *\n   * Update the specified project's name.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {string} [params.name] - The new name to give this project.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n   */\n\n  DiscoveryV2.prototype.updateProject = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var body = {\n      'name': _params.name\n    };\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateProject');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}',\n        method: 'POST',\n        body: body,\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /**\n   * Delete a project.\n   *\n   * Deletes the specified project.\n   *\n   * **Important:** Deleting a project deletes everything that is part of the specified project, including all\n   * collections.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n   * Discovery administrative tooling.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n   */\n\n  DiscoveryV2.prototype.deleteProject = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['projectId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version\n    };\n    var path = {\n      'project_id': _params.projectId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteProject');\n    var parameters = {\n      options: {\n        url: '/v2/projects/{project_id}',\n        method: 'DELETE',\n        qs: query,\n        path: path\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {}, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  /*************************\n   * userData\n   ************************/\n\n  /**\n   * Delete labeled data.\n   *\n   * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with\n   * the customer ID.\n   *\n   * You associate a customer ID with data by passing the **X-Watson-Metadata** header with a request that passes data.\n   * For more information about personal data and customer IDs, see [Information\n   * security](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-information-security#information-security).\n   *\n   *\n   * **Note:** This method is only supported on IBM Cloud instances of Discovery.\n   *\n   * @param {Object} params - The parameters to send to the service.\n   * @param {string} params.customerId - The customer ID for which all data is to be deleted.\n   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n   * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n   */\n\n  DiscoveryV2.prototype.deleteUserData = function (params) {\n    var _params = Object.assign({}, params);\n\n    var requiredParams = ['customerId'];\n    var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n\n    if (missingParams) {\n      return Promise.reject(missingParams);\n    }\n\n    var query = {\n      'version': this.version,\n      'customer_id': _params.customerId\n    };\n    var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteUserData');\n    var parameters = {\n      options: {\n        url: '/v2/user_data',\n        method: 'DELETE',\n        qs: query\n      },\n      defaultOptions: extend(true, {}, this.baseOptions, {\n        headers: extend(true, sdkHeaders, {}, _params.headers)\n      })\n    };\n    return this.createRequest(parameters);\n  };\n\n  ;\n  DiscoveryV2.DEFAULT_SERVICE_URL = 'https://api.us-south.discovery.watson.cloud.ibm.com';\n  DiscoveryV2.DEFAULT_SERVICE_NAME = 'discovery';\n  return DiscoveryV2;\n}(ibm_cloud_sdk_core_1.BaseService);\n/*************************\n * interfaces\n ************************/\n\n\n(function (DiscoveryV2) {\n  /** Constants for the `addDocument` operation. */\n  var AddDocumentConstants;\n\n  (function (AddDocumentConstants) {\n    /** The content type of file. */\n    var FileContentType;\n\n    (function (FileContentType) {\n      FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n      FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n      FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n      FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n      FileContentType[\"TEXT_HTML\"] = \"text/html\";\n      FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n    })(FileContentType = AddDocumentConstants.FileContentType || (AddDocumentConstants.FileContentType = {}));\n  })(AddDocumentConstants = DiscoveryV2.AddDocumentConstants || (DiscoveryV2.AddDocumentConstants = {}));\n  /** Constants for the `updateDocument` operation. */\n\n\n  var UpdateDocumentConstants;\n\n  (function (UpdateDocumentConstants) {\n    /** The content type of file. */\n    var FileContentType;\n\n    (function (FileContentType) {\n      FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n      FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n      FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n      FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n      FileContentType[\"TEXT_HTML\"] = \"text/html\";\n      FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n    })(FileContentType = UpdateDocumentConstants.FileContentType || (UpdateDocumentConstants.FileContentType = {}));\n  })(UpdateDocumentConstants = DiscoveryV2.UpdateDocumentConstants || (DiscoveryV2.UpdateDocumentConstants = {}));\n  /** Constants for the `analyzeDocument` operation. */\n\n\n  var AnalyzeDocumentConstants;\n\n  (function (AnalyzeDocumentConstants) {\n    /** The content type of file. */\n    var FileContentType;\n\n    (function (FileContentType) {\n      FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n      FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n      FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n      FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n      FileContentType[\"TEXT_HTML\"] = \"text/html\";\n      FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n    })(FileContentType = AnalyzeDocumentConstants.FileContentType || (AnalyzeDocumentConstants.FileContentType = {}));\n  })(AnalyzeDocumentConstants = DiscoveryV2.AnalyzeDocumentConstants || (DiscoveryV2.AnalyzeDocumentConstants = {}));\n  /** Constants for the `createProject` operation. */\n\n\n  var CreateProjectConstants;\n\n  (function (CreateProjectConstants) {\n    /** The project type of this project. */\n    var Type;\n\n    (function (Type) {\n      Type[\"DOCUMENT_RETRIEVAL\"] = \"document_retrieval\";\n      Type[\"ANSWER_RETRIEVAL\"] = \"answer_retrieval\";\n      Type[\"CONTENT_MINING\"] = \"content_mining\";\n      Type[\"OTHER\"] = \"other\";\n    })(Type = CreateProjectConstants.Type || (CreateProjectConstants.Type = {}));\n  })(CreateProjectConstants = DiscoveryV2.CreateProjectConstants || (DiscoveryV2.CreateProjectConstants = {}));\n})(DiscoveryV2 || (DiscoveryV2 = {}));\n\nmodule.exports = DiscoveryV2;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-watson/discovery/v2.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","extend","require","ibm_cloud_sdk_core_1","common_1","DiscoveryV2","_super","options","_this","requiredParams","missingParams","getMissingParams","serviceName","DEFAULT_SERVICE_NAME","authenticator","getAuthenticatorFromEnvironment","call","configureService","serviceUrl","setServiceUrl","version","listCollections","params","_params","assign","Promise","reject","query","path","projectId","sdkHeaders","getSdkHeaders","parameters","url","method","qs","defaultOptions","baseOptions","headers","createRequest","createCollection","body","name","description","language","enrichments","getCollection","collectionId","updateCollection","deleteCollection","collectionIds","filter","naturalLanguageQuery","aggregation","count","_return","offset","sort","highlight","spellingSuggestions","tableResults","suggestedRefinements","passages","getAutocompletion","prefix","field","queryNotices","listFields","getComponentSettings","addDocument","formData","data","file","filename","contentType","fileContentType","metadata","xWatsonDiscoveryForce","updateDocument","documentId","deleteDocument","listTrainingQueries","deleteTrainingQueries","createTrainingQuery","examples","getTrainingQuery","queryId","updateTrainingQuery","analyzeDocument","listEnrichments","createEnrichment","enrichment","getEnrichment","enrichmentId","updateEnrichment","deleteEnrichment","listProjects","createProject","type","defaultQueryParameters","getProject","updateProject","deleteProject","deleteUserData","customerId","DEFAULT_SERVICE_URL","BaseService","AddDocumentConstants","FileContentType","UpdateDocumentConstants","AnalyzeDocumentConstants","CreateProjectConstants","Type","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * (C) Copyright IBM Corp. 2019, 2020.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * IBM OpenAPI SDK Code Generator Version: 99-SNAPSHOT-8d569e8f-20201103-112432\n */\nvar extend = require(\"extend\");\nvar ibm_cloud_sdk_core_1 = require(\"ibm-cloud-sdk-core\");\nvar common_1 = require(\"../lib/common\");\n/**\n * IBM Watson&trade; Discovery is a cognitive search and content analytics engine that you can add to applications to\n * identify patterns, trends and actionable insights to drive better decision-making. Securely unify structured and\n * unstructured data with pre-enriched content, and use a simplified query language to eliminate the need for manual\n * filtering of results.\n */\nvar DiscoveryV2 = /** @class */ (function (_super) {\n    __extends(DiscoveryV2, _super);\n    /**\n     * Construct a DiscoveryV2 object.\n     *\n     * @param {Object} options - Options for the service.\n     * @param {string} options.version - Release date of the version of the API you want to use. Specify dates in\n     * YYYY-MM-DD format. The current version is `2019-11-22`.\n     * @param {string} [options.serviceUrl] - The base url to use when contacting the service (e.g. 'https://api.us-south.discovery.watson.cloud.ibm.com'). The base url may differ between IBM Cloud regions.\n     * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.\n     * @param {string} [options.serviceName] - The name of the service to configure\n     * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service. Defaults to environment if not set\n     * @constructor\n     * @returns {DiscoveryV2}\n     */\n    function DiscoveryV2(options) {\n        var _this = this;\n        options = options || {};\n        var requiredParams = ['version'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(options, requiredParams);\n        if (missingParams) {\n            throw missingParams;\n        }\n        if (!options.serviceName) {\n            options.serviceName = DiscoveryV2.DEFAULT_SERVICE_NAME;\n        }\n        // If the caller didn't supply an authenticator, construct one from external configuration.\n        if (!options.authenticator) {\n            options.authenticator = ibm_cloud_sdk_core_1.getAuthenticatorFromEnvironment(options.serviceName);\n        }\n        _this = _super.call(this, options) || this;\n        _this.configureService(options.serviceName);\n        if (options.serviceUrl) {\n            _this.setServiceUrl(options.serviceUrl);\n        }\n        _this.version = options.version;\n        return _this;\n    }\n    /*************************\n     * collections\n     ************************/\n    /**\n     * List collections.\n     *\n     * Lists existing collections for the specified project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListCollectionsResponse>>}\n     */\n    DiscoveryV2.prototype.listCollections = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listCollections');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Create a collection.\n     *\n     * Create a new collection in the specified project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.name - The name of the collection.\n     * @param {string} [params.description] - A description of the collection.\n     * @param {string} [params.language] - The language of the collection.\n     * @param {CollectionEnrichment[]} [params.enrichments] - An array of enrichments that are applied to this collection.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n     */\n    DiscoveryV2.prototype.createCollection = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'name'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'name': _params.name,\n            'description': _params.description,\n            'language': _params.language,\n            'enrichments': _params.enrichments\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createCollection');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Get collection.\n     *\n     * Get details about the specified collection.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n     */\n    DiscoveryV2.prototype.getCollection = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getCollection');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Update a collection.\n     *\n     * Updates the specified collection's name, description, and enrichments.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {string} [params.name] - The name of the collection.\n     * @param {string} [params.description] - A description of the collection.\n     * @param {CollectionEnrichment[]} [params.enrichments] - An array of enrichments that are applied to this collection.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.CollectionDetails>>}\n     */\n    DiscoveryV2.prototype.updateCollection = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'name': _params.name,\n            'description': _params.description,\n            'enrichments': _params.enrichments\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateCollection');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Delete a collection.\n     *\n     * Deletes the specified collection from the project. All documents stored in the specified collection and not shared\n     * is also deleted.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n     */\n    DiscoveryV2.prototype.deleteCollection = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteCollection');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * queries\n     ************************/\n    /**\n     * Query a project.\n     *\n     * By using this method, you can construct queries. For details, see the [Discovery\n     * documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-query-concepts). The default query\n     * parameters are defined by the settings for this project, see the [Discovery\n     * documentation](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-project-defaults) for an overview of\n     * the standard default settings, and see [the Projects API documentation](#create-project) for details about how to\n     * set custom default query settings.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string[]} [params.collectionIds] - A comma-separated list of collection IDs to be queried against.\n     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.\n     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.\n     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and\n     * full text, but with the most relevant documents listed first. Use a query search when you want to find the most\n     * relevant search results.\n     * @param {string} [params.naturalLanguageQuery] - A natural language query that returns relevant documents by\n     * utilizing training data and natural language understanding.\n     * @param {string} [params.aggregation] - An aggregation search that returns an exact answer by combining query search\n     * with filters. Useful for applications to build lists, tables, and time series. For a full list of possible\n     * aggregations, see the Query reference.\n     * @param {number} [params.count] - Number of results to return.\n     * @param {string[]} [params._return] - A list of the fields in the document hierarchy to return. If this parameter\n     * not specified, then all top-level fields are returned.\n     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total\n     * number of results that are returned is 10 and the offset is 8, it returns the last two results.\n     * @param {string} [params.sort] - A comma-separated list of fields in the document to sort on. You can optionally\n     * specify a sort direction by prefixing the field with `-` for descending or `+` for ascending. Ascending is the\n     * default sort direction if no prefix is specified. This parameter cannot be used in the same query as the **bias**\n     * parameter.\n     * @param {boolean} [params.highlight] - When `true`, a highlight field is returned for each result which contains the\n     * fields which match the query with `<em></em>` tags around the matching query terms.\n     * @param {boolean} [params.spellingSuggestions] - When `true` and the **natural_language_query** parameter is used,\n     * the **natural_language_query** parameter is spell checked. The most likely correction is returned in the\n     * **suggested_query** field of the response (if one exists).\n     * @param {QueryLargeTableResults} [params.tableResults] - Configuration for table retrieval.\n     * @param {QueryLargeSuggestedRefinements} [params.suggestedRefinements] - Configuration for suggested refinements.\n     * @param {QueryLargePassages} [params.passages] - Configuration for passage retrieval.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.QueryResponse>>}\n     */\n    DiscoveryV2.prototype.query = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'collection_ids': _params.collectionIds,\n            'filter': _params.filter,\n            'query': _params.query,\n            'natural_language_query': _params.naturalLanguageQuery,\n            'aggregation': _params.aggregation,\n            'count': _params.count,\n            'return': _params._return,\n            'offset': _params.offset,\n            'sort': _params.sort,\n            'highlight': _params.highlight,\n            'spelling_suggestions': _params.spellingSuggestions,\n            'table_results': _params.tableResults,\n            'suggested_refinements': _params.suggestedRefinements,\n            'passages': _params.passages\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'query');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/query',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Get Autocomplete Suggestions.\n     *\n     * Returns completion query suggestions for the specified prefix.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.prefix - The prefix to use for autocompletion. For example, the prefix `Ho` could\n     * autocomplete to `Hot`, `Housing`, or `How do I upgrade`. Possible completions are.\n     * @param {string[]} [params.collectionIds] - Comma separated list of the collection IDs. If this parameter is not\n     * specified, all collections in the project are used.\n     * @param {string} [params.field] - The field in the result documents that autocompletion suggestions are identified\n     * from.\n     * @param {number} [params.count] - The number of autocompletion suggestions to return.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Completions>>}\n     */\n    DiscoveryV2.prototype.getAutocompletion = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'prefix'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version,\n            'prefix': _params.prefix,\n            'collection_ids': _params.collectionIds,\n            'field': _params.field,\n            'count': _params.count\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getAutocompletion');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/autocompletion',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Query system notices.\n     *\n     * Queries for notices (errors or warnings) that might have been generated by the system. Notices are generated when\n     * ingesting documents and performing relevance training.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} [params.filter] - A cacheable query that excludes documents that don't mention the query content.\n     * Filter searches are better for metadata-type searches and for assessing the concepts in the data set.\n     * @param {string} [params.query] - A query search returns all documents in your data set with full enrichments and\n     * full text, but with the most relevant documents listed first.\n     * @param {string} [params.naturalLanguageQuery] - A natural language query that returns relevant documents by\n     * utilizing training data and natural language understanding.\n     * @param {number} [params.count] - Number of results to return. The maximum for the **count** and **offset** values\n     * together in any one query is **10000**.\n     * @param {number} [params.offset] - The number of query results to skip at the beginning. For example, if the total\n     * number of results that are returned is 10 and the offset is 8, it returns the last two results. The maximum for the\n     * **count** and **offset** values together in any one query is **10000**.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.QueryNoticesResponse>>}\n     */\n    DiscoveryV2.prototype.queryNotices = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version,\n            'filter': _params.filter,\n            'query': _params.query,\n            'natural_language_query': _params.naturalLanguageQuery,\n            'count': _params.count,\n            'offset': _params.offset\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'queryNotices');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/notices',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * List fields.\n     *\n     * Gets a list of the unique fields (and their types) stored in the the specified collections.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string[]} [params.collectionIds] - Comma separated list of the collection IDs. If this parameter is not\n     * specified, all collections in the project are used.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListFieldsResponse>>}\n     */\n    DiscoveryV2.prototype.listFields = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version,\n            'collection_ids': _params.collectionIds\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listFields');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/fields',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * componentSettings\n     ************************/\n    /**\n     * List component settings.\n     *\n     * Returns default configuration settings for components.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ComponentSettingsResponse>>}\n     */\n    DiscoveryV2.prototype.getComponentSettings = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getComponentSettings');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/component_settings',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * documents\n     ************************/\n    /**\n     * Add a document.\n     *\n     * Add a document to a collection with optional metadata.\n     *\n     *  Returns immediately after the system has accepted the document for processing.\n     *\n     *   * The user must provide document content, metadata, or both. If the request is missing both document content and\n     * metadata, it is rejected.\n     *\n     *   * The user can set the **Content-Type** parameter on the **file** part to indicate the media type of the\n     * document. If the **Content-Type** parameter is missing or is one of the generic media types (for example,\n     * `application/octet-stream`), then the service attempts to automatically detect the document's media type.\n     *\n     *   * The following field names are reserved and will be filtered out if present after normalization: `id`, `score`,\n     * `highlight`, and any field with the prefix of: `_`, `+`, or `-`\n     *\n     *   * Fields with empty name values after normalization are filtered out before indexing.\n     *\n     *   * Fields containing the following characters after normalization are filtered out before indexing: `#` and `,`\n     *\n     *   If the document is uploaded to a collection that has it's data shared with another collection, the\n     * **X-Watson-Discovery-Force** header must be set to `true`.\n     *\n     *  **Note:** Documents can be added with a specific **document_id** by using the\n     * **_/v2/projects/{project_id}/collections/{collection_id}/documents** method.\n     *\n     * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n     * modify a collection that connects to an external source such as Microsoft SharePoint.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n     * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n     * configuration is 1 megabyte. Files larger than the supported size are rejected.\n     * @param {string} [params.filename] - The filename for file.\n     * @param {string} [params.fileContentType] - The content type of file.\n     * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n     * MB are rejected.\n     *\n     *\n     * Example:  ``` {\n     *   \"Creator\": \"Johnny Appleseed\",\n     *   \"Subject\": \"Apples\"\n     * } ```.\n     * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n     * even if the data for that collection is shared with other collections.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DocumentAccepted>>}\n     */\n    DiscoveryV2.prototype.addDocument = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var formData = {\n            'file': {\n                data: _params.file,\n                filename: _params.filename,\n                contentType: _params.fileContentType\n            },\n            'metadata': _params.metadata\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'addDocument');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}/documents',\n                method: 'POST',\n                qs: query,\n                path: path,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                    'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Update a document.\n     *\n     * Replace an existing document or add a document with a specified **document_id**. Starts ingesting a document with\n     * optional metadata.\n     *\n     * If the document is uploaded to a collection that has it's data shared with another collection, the\n     * **X-Watson-Discovery-Force** header must be set to `true`.\n     *\n     * **Note:** When uploading a new document with this method it automatically replaces any document stored with the\n     * same **document_id** if it exists.\n     *\n     * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n     * modify a collection that connects to an external source such as Microsoft SharePoint.\n     *\n     * **Note:** If an uploaded document is segmented, all segments will be overwritten, even if the updated version of\n     * the document has fewer segments.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {string} params.documentId - The ID of the document.\n     * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n     * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n     * configuration is 1 megabyte. Files larger than the supported size are rejected.\n     * @param {string} [params.filename] - The filename for file.\n     * @param {string} [params.fileContentType] - The content type of file.\n     * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n     * MB are rejected.\n     *\n     *\n     * Example:  ``` {\n     *   \"Creator\": \"Johnny Appleseed\",\n     *   \"Subject\": \"Apples\"\n     * } ```.\n     * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n     * even if the data for that collection is shared with other collections.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DocumentAccepted>>}\n     */\n    DiscoveryV2.prototype.updateDocument = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId', 'documentId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var formData = {\n            'file': {\n                data: _params.file,\n                filename: _params.filename,\n                contentType: _params.fileContentType\n            },\n            'metadata': _params.metadata\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId,\n            'document_id': _params.documentId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateDocument');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}',\n                method: 'POST',\n                qs: query,\n                path: path,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                    'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Delete a document.\n     *\n     * If the given document ID is invalid, or if the document is not found, then the a success response is returned (HTTP\n     * status code `200`) with the status set to 'deleted'.\n     *\n     * **Note:** This operation only works on collections created to accept direct file uploads. It cannot be used to\n     * modify a collection that connects to an external source such as Microsoft SharePoint.\n     *\n     * **Note:** Segments of an uploaded document cannot be deleted individually. Delete all segments by deleting using\n     * the `parent_document_id` of a segment result.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {string} params.documentId - The ID of the document.\n     * @param {boolean} [params.xWatsonDiscoveryForce] - When `true`, the uploaded document is added to the collection\n     * even if the data for that collection is shared with other collections.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.DeleteDocumentResponse>>}\n     */\n    DiscoveryV2.prototype.deleteDocument = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId', 'documentId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId,\n            'document_id': _params.documentId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteDocument');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}/documents/{document_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'X-Watson-Discovery-Force': _params.xWatsonDiscoveryForce\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * trainingData\n     ************************/\n    /**\n     * List training queries.\n     *\n     * List the training queries for the specified project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuerySet>>}\n     */\n    DiscoveryV2.prototype.listTrainingQueries = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listTrainingQueries');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/training_data/queries',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Delete training queries.\n     *\n     * Removes all training queries for the specified project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n     */\n    DiscoveryV2.prototype.deleteTrainingQueries = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteTrainingQueries');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/training_data/queries',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Create training query.\n     *\n     * Add a query to the training data for this project. The query can contain a filter and natural language query.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.naturalLanguageQuery - The natural text query for the training query.\n     * @param {TrainingExample[]} params.examples - Array of training examples.\n     * @param {string} [params.filter] - The filter used on the collection before the **natural_language_query** is\n     * applied.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n     */\n    DiscoveryV2.prototype.createTrainingQuery = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'naturalLanguageQuery', 'examples'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'natural_language_query': _params.naturalLanguageQuery,\n            'examples': _params.examples,\n            'filter': _params.filter\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createTrainingQuery');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/training_data/queries',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Get a training data query.\n     *\n     * Get details for a specific training data query, including the query string and all examples.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.queryId - The ID of the query used for training.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n     */\n    DiscoveryV2.prototype.getTrainingQuery = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'queryId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'query_id': _params.queryId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getTrainingQuery');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/training_data/queries/{query_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Update a training query.\n     *\n     * Updates an existing training query and it's examples.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.queryId - The ID of the query used for training.\n     * @param {string} params.naturalLanguageQuery - The natural text query for the training query.\n     * @param {TrainingExample[]} params.examples - Array of training examples.\n     * @param {string} [params.filter] - The filter used on the collection before the **natural_language_query** is\n     * applied.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.TrainingQuery>>}\n     */\n    DiscoveryV2.prototype.updateTrainingQuery = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'queryId', 'naturalLanguageQuery', 'examples'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'natural_language_query': _params.naturalLanguageQuery,\n            'examples': _params.examples,\n            'filter': _params.filter\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'query_id': _params.queryId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateTrainingQuery');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/training_data/queries/{query_id}',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * analyze\n     ************************/\n    /**\n     * Analyze a Document.\n     *\n     * Process a document using the specified collection's settings and return it for realtime use.\n     *\n     * **Note:** Documents processed using this method are not added to the specified collection.\n     *\n     * **Note:** This method is only supported on IBM Cloud Pak for Data instances of Discovery.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.collectionId - The ID of the collection.\n     * @param {NodeJS.ReadableStream|Buffer} [params.file] - The content of the document to ingest. The maximum supported\n     * file size when adding a file to a collection is 50 megabytes, the maximum supported file size when testing a\n     * configuration is 1 megabyte. Files larger than the supported size are rejected.\n     * @param {string} [params.filename] - The filename for file.\n     * @param {string} [params.fileContentType] - The content type of file.\n     * @param {string} [params.metadata] - The maximum supported metadata file size is 1 MB. Metadata parts larger than 1\n     * MB are rejected.\n     *\n     *\n     * Example:  ``` {\n     *   \"Creator\": \"Johnny Appleseed\",\n     *   \"Subject\": \"Apples\"\n     * } ```.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.AnalyzedDocument>>}\n     */\n    DiscoveryV2.prototype.analyzeDocument = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'collectionId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var formData = {\n            'file': {\n                data: _params.file,\n                filename: _params.filename,\n                contentType: _params.fileContentType\n            },\n            'metadata': _params.metadata\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'collection_id': _params.collectionId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'analyzeDocument');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/collections/{collection_id}/analyze',\n                method: 'POST',\n                qs: query,\n                path: path,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * enrichments\n     ************************/\n    /**\n     * List Enrichments.\n     *\n     * List the enrichments available to this project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichments>>}\n     */\n    DiscoveryV2.prototype.listEnrichments = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listEnrichments');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/enrichments',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Create an enrichment.\n     *\n     * Create an enrichment for use with the specified project/.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {CreateEnrichment} params.enrichment -\n     * @param {NodeJS.ReadableStream|Buffer} [params.file] - The enrichment file to upload.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n     */\n    DiscoveryV2.prototype.createEnrichment = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'enrichment'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var formData = {\n            'enrichment': _params.enrichment,\n            'file': {\n                data: _params.file,\n                contentType: 'application/octet-stream'\n            }\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createEnrichment');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/enrichments',\n                method: 'POST',\n                qs: query,\n                path: path,\n                formData: formData\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'multipart/form-data',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Get enrichment.\n     *\n     * Get details about a specific enrichment.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.enrichmentId - The ID of the enrichment.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n     */\n    DiscoveryV2.prototype.getEnrichment = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'enrichmentId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'enrichment_id': _params.enrichmentId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getEnrichment');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Update an enrichment.\n     *\n     * Updates an existing enrichment's name and description.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.enrichmentId - The ID of the enrichment.\n     * @param {string} params.name - A new name for the enrichment.\n     * @param {string} [params.description] - A new description for the enrichment.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Enrichment>>}\n     */\n    DiscoveryV2.prototype.updateEnrichment = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'enrichmentId', 'name'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'name': _params.name,\n            'description': _params.description\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'enrichment_id': _params.enrichmentId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateEnrichment');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Delete an enrichment.\n     *\n     * Deletes an existing enrichment from the specified project.\n     *\n     * **Note:** Only enrichments that have been manually created can be deleted.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} params.enrichmentId - The ID of the enrichment.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n     */\n    DiscoveryV2.prototype.deleteEnrichment = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId', 'enrichmentId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId,\n            'enrichment_id': _params.enrichmentId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteEnrichment');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}/enrichments/{enrichment_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * projects\n     ************************/\n    /**\n     * List projects.\n     *\n     * Lists existing projects for this instance.\n     *\n     * @param {Object} [params] - The parameters to send to the service.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ListProjectsResponse>>}\n     */\n    DiscoveryV2.prototype.listProjects = function (params) {\n        var _params = Object.assign({}, params);\n        var query = {\n            'version': this.version\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'listProjects');\n        var parameters = {\n            options: {\n                url: '/v2/projects',\n                method: 'GET',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Create a Project.\n     *\n     * Create a new project for this instance.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.name - The human readable name of this project.\n     * @param {string} params.type - The project type of this project.\n     * @param {DefaultQueryParams} [params.defaultQueryParameters] - Default query parameters for this project.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n     */\n    DiscoveryV2.prototype.createProject = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['name', 'type'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'name': _params.name,\n            'type': _params.type,\n            'default_query_parameters': _params.defaultQueryParameters\n        };\n        var query = {\n            'version': this.version\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'createProject');\n        var parameters = {\n            options: {\n                url: '/v2/projects',\n                method: 'POST',\n                body: body,\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Get project.\n     *\n     * Get details on the specified project.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n     */\n    DiscoveryV2.prototype.getProject = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'getProject');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}',\n                method: 'GET',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Update a project.\n     *\n     * Update the specified project's name.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {string} [params.name] - The new name to give this project.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.ProjectDetails>>}\n     */\n    DiscoveryV2.prototype.updateProject = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var body = {\n            'name': _params.name\n        };\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'updateProject');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}',\n                method: 'POST',\n                body: body,\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                }, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /**\n     * Delete a project.\n     *\n     * Deletes the specified project.\n     *\n     * **Important:** Deleting a project deletes everything that is part of the specified project, including all\n     * collections.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.projectId - The ID of the project. This information can be found from the deploy page of the\n     * Discovery administrative tooling.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n     */\n    DiscoveryV2.prototype.deleteProject = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['projectId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version\n        };\n        var path = {\n            'project_id': _params.projectId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteProject');\n        var parameters = {\n            options: {\n                url: '/v2/projects/{project_id}',\n                method: 'DELETE',\n                qs: query,\n                path: path,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    /*************************\n     * userData\n     ************************/\n    /**\n     * Delete labeled data.\n     *\n     * Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with\n     * the customer ID.\n     *\n     * You associate a customer ID with data by passing the **X-Watson-Metadata** header with a request that passes data.\n     * For more information about personal data and customer IDs, see [Information\n     * security](https://cloud.ibm.com/docs/discovery-data?topic=discovery-data-information-security#information-security).\n     *\n     *\n     * **Note:** This method is only supported on IBM Cloud instances of Discovery.\n     *\n     * @param {Object} params - The parameters to send to the service.\n     * @param {string} params.customerId - The customer ID for which all data is to be deleted.\n     * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers\n     * @returns {Promise<DiscoveryV2.Response<DiscoveryV2.Empty>>}\n     */\n    DiscoveryV2.prototype.deleteUserData = function (params) {\n        var _params = Object.assign({}, params);\n        var requiredParams = ['customerId'];\n        var missingParams = ibm_cloud_sdk_core_1.getMissingParams(_params, requiredParams);\n        if (missingParams) {\n            return Promise.reject(missingParams);\n        }\n        var query = {\n            'version': this.version,\n            'customer_id': _params.customerId\n        };\n        var sdkHeaders = common_1.getSdkHeaders(DiscoveryV2.DEFAULT_SERVICE_NAME, 'v2', 'deleteUserData');\n        var parameters = {\n            options: {\n                url: '/v2/user_data',\n                method: 'DELETE',\n                qs: query,\n            },\n            defaultOptions: extend(true, {}, this.baseOptions, {\n                headers: extend(true, sdkHeaders, {}, _params.headers),\n            }),\n        };\n        return this.createRequest(parameters);\n    };\n    ;\n    DiscoveryV2.DEFAULT_SERVICE_URL = 'https://api.us-south.discovery.watson.cloud.ibm.com';\n    DiscoveryV2.DEFAULT_SERVICE_NAME = 'discovery';\n    return DiscoveryV2;\n}(ibm_cloud_sdk_core_1.BaseService));\n/*************************\n * interfaces\n ************************/\n(function (DiscoveryV2) {\n    /** Constants for the `addDocument` operation. */\n    var AddDocumentConstants;\n    (function (AddDocumentConstants) {\n        /** The content type of file. */\n        var FileContentType;\n        (function (FileContentType) {\n            FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n            FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n            FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n            FileContentType[\"TEXT_HTML\"] = \"text/html\";\n            FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n        })(FileContentType = AddDocumentConstants.FileContentType || (AddDocumentConstants.FileContentType = {}));\n    })(AddDocumentConstants = DiscoveryV2.AddDocumentConstants || (DiscoveryV2.AddDocumentConstants = {}));\n    /** Constants for the `updateDocument` operation. */\n    var UpdateDocumentConstants;\n    (function (UpdateDocumentConstants) {\n        /** The content type of file. */\n        var FileContentType;\n        (function (FileContentType) {\n            FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n            FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n            FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n            FileContentType[\"TEXT_HTML\"] = \"text/html\";\n            FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n        })(FileContentType = UpdateDocumentConstants.FileContentType || (UpdateDocumentConstants.FileContentType = {}));\n    })(UpdateDocumentConstants = DiscoveryV2.UpdateDocumentConstants || (DiscoveryV2.UpdateDocumentConstants = {}));\n    /** Constants for the `analyzeDocument` operation. */\n    var AnalyzeDocumentConstants;\n    (function (AnalyzeDocumentConstants) {\n        /** The content type of file. */\n        var FileContentType;\n        (function (FileContentType) {\n            FileContentType[\"APPLICATION_JSON\"] = \"application/json\";\n            FileContentType[\"APPLICATION_MSWORD\"] = \"application/msword\";\n            FileContentType[\"APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT\"] = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\n            FileContentType[\"APPLICATION_PDF\"] = \"application/pdf\";\n            FileContentType[\"TEXT_HTML\"] = \"text/html\";\n            FileContentType[\"APPLICATION_XHTML_XML\"] = \"application/xhtml+xml\";\n        })(FileContentType = AnalyzeDocumentConstants.FileContentType || (AnalyzeDocumentConstants.FileContentType = {}));\n    })(AnalyzeDocumentConstants = DiscoveryV2.AnalyzeDocumentConstants || (DiscoveryV2.AnalyzeDocumentConstants = {}));\n    /** Constants for the `createProject` operation. */\n    var CreateProjectConstants;\n    (function (CreateProjectConstants) {\n        /** The project type of this project. */\n        var Type;\n        (function (Type) {\n            Type[\"DOCUMENT_RETRIEVAL\"] = \"document_retrieval\";\n            Type[\"ANSWER_RETRIEVAL\"] = \"answer_retrieval\";\n            Type[\"CONTENT_MINING\"] = \"content_mining\";\n            Type[\"OTHER\"] = \"other\";\n        })(Type = CreateProjectConstants.Type || (CreateProjectConstants.Type = {}));\n    })(CreateProjectConstants = DiscoveryV2.CreateProjectConstants || (DiscoveryV2.CreateProjectConstants = {}));\n})(DiscoveryV2 || (DiscoveryV2 = {}));\nmodule.exports = DiscoveryV2;\n"]},"metadata":{},"sourceType":"script"}