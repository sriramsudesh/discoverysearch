{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar fileType = require(\"file-type\");\n\nvar isstream_1 = require(\"isstream\");\n\nvar mime_types_1 = require(\"mime-types\");\n\nvar path_1 = require(\"path\");\n\nvar logger_1 = require(\"./logger\"); // custom type guards\n\n\nfunction isFileObject(obj) {\n  return Boolean(obj && obj.value);\n}\n\nfunction isFileStream(obj) {\n  return Boolean(obj && isstream_1.isReadable(obj) && obj.path);\n}\n\nfunction isFileWithMetadata(obj) {\n  return Boolean(obj && obj.data && isFileData(obj.data));\n}\n\nexports.isFileWithMetadata = isFileWithMetadata;\n\nfunction isFileData(obj) {\n  return Boolean(obj && (isstream_1.isReadable(obj) || Buffer.isBuffer(obj)));\n}\n\nexports.isFileData = isFileData;\n\nfunction isEmptyObject(obj) {\n  return Boolean(obj && Object.keys(obj).length === 0 && obj.constructor === Object);\n}\n\nexports.isEmptyObject = isEmptyObject;\n/**\n * This function retrieves the content type of the input.\n * @param {NodeJS.ReadableStream|Buffer} inputData - The data to retrieve content type for.\n * @returns {string} the content type of the input.\n */\n\nfunction getContentType(inputData) {\n  var contentType = null;\n\n  if (isFileStream(inputData)) {\n    // if the inputData is a NodeJS.ReadableStream\n    var mimeType = mime_types_1.lookup(inputData.path);\n    contentType = {\n      mime: mimeType || null\n    };\n  } else if (Buffer.isBuffer(inputData)) {\n    // if the inputData is a Buffer\n    contentType = fileType(inputData);\n  }\n\n  return contentType ? contentType.mime : null;\n}\n\nexports.getContentType = getContentType;\n/**\n *\n * @param {string} url - the url string.\n * @returns {string}\n */\n\nfunction stripTrailingSlash(url) {\n  // Match a forward slash / at the end of the string ($)\n  return url.replace(/\\/$/, '');\n}\n\nexports.stripTrailingSlash = stripTrailingSlash;\n/**\n * Validates that all required params are provided\n * @param params - the method parameters.\n * @param requires - the required parameter names.\n * @returns {Error|null}\n */\n\nfunction getMissingParams(params, requires) {\n  var missing;\n\n  if (!requires) {\n    return null;\n  } else if (!params) {\n    missing = requires;\n  } else {\n    missing = [];\n    requires.forEach(function (require) {\n      if (isMissing(params[require])) {\n        missing.push(require);\n      }\n    });\n  }\n\n  return missing.length > 0 ? new Error('Missing required parameters: ' + missing.join(', ')) : null;\n}\n\nexports.getMissingParams = getMissingParams;\n/**\n * Returns true if value is determined to be \"missing\". Currently defining \"missing\"\n * as `undefined`, `null`, or the empty string.\n *\n * @param value - the parameter value\n * @returns boolean\n */\n\nfunction isMissing(value) {\n  return value === undefined || value === null || value === '';\n}\n/**\n * Return true if 'text' is html\n * @param  {string} text - The 'text' to analyze\n * @returns {boolean} true if 'text' has html tags\n */\n\n\nfunction isHTML(text) {\n  logger_1.default.debug(\"Determining if the text \" + text + \" is HTML.\");\n  return /<[a-z][\\s\\S]*>/i.test(text);\n}\n\nexports.isHTML = isHTML;\n/**\n * Returns the first match from formats that is key the params map\n * otherwise null\n * @param  {Object} params - The parameters.\n * @param  {string[]} requires - The keys we want to check\n * @returns {string|null}\n */\n\nfunction getFormat(params, formats) {\n  if (!formats || !params) {\n    logger_1.default.debug(\"No formats to parse in getFormat. Returning null\");\n    return null;\n  }\n\n  for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n    var item = formats_1[_i];\n\n    if (item in params) {\n      return item;\n    }\n  }\n\n  logger_1.default.debug(\"No formats to parse in getFormat. Returning null\");\n  return null;\n}\n\nexports.getFormat = getFormat;\n/**\n * This function builds a `form-data` object for each file parameter.\n * @param {FileWithMetadata} fileParam The file parameter.\n * @param {NodeJS.ReadableStream|Buffer} fileParam.data The data content of the file.\n * @param {string} fileParam.filename The filename of the file.\n * @param {string} fileParam.contentType The content type of the file.\n * @returns {FileObject}\n */\n\nfunction buildRequestFileObject(fileParam) {\n  var fileObj;\n\n  if (isFileObject(fileParam.data)) {\n    // For backward compatibility, we allow the data to be a FileObject.\n    fileObj = {\n      value: fileParam.data.value,\n      options: {}\n    };\n\n    if (fileParam.data.options) {\n      fileObj.options = {\n        filename: fileParam.filename || fileParam.data.options.filename,\n        contentType: fileParam.contentType || fileParam.data.options.contentType\n      };\n    }\n  } else {\n    fileObj = {\n      value: fileParam.data,\n      options: {\n        filename: fileParam.filename,\n        contentType: fileParam.contentType\n      }\n    };\n  } // Also for backward compatibility, we allow data to be a string\n\n\n  if (typeof fileObj.value === 'string') {\n    fileObj.value = Buffer.from(fileObj.value);\n  } // build filename\n\n\n  var filename = fileObj.options.filename;\n\n  if (!filename && isFileStream(fileObj.value)) {\n    // if readable stream with path property\n    filename = fileObj.value.path;\n  } // toString handles the case when path is a buffer\n\n\n  fileObj.options.filename = filename ? path_1.basename(filename.toString()) : '_'; // build contentType\n\n  if (!fileObj.options.contentType && isFileData(fileObj.value)) {\n    fileObj.options.contentType = getContentType(fileObj.value) || 'application/octet-stream';\n  }\n\n  return fileObj;\n}\n\nexports.buildRequestFileObject = buildRequestFileObject;\n/**\n * This function converts an object's keys to lower case.\n * note: does not convert nested keys\n * @param {Object} obj The object to convert the keys of.\n * @returns {Object}\n */\n\nfunction toLowerKeys(obj) {\n  var _obj = {};\n\n  if (obj) {\n    _obj = Object.assign.apply(Object, __spreadArrays([{}], Object.keys(obj).map(function (key) {\n      var _a;\n\n      return _a = {}, _a[key.toLowerCase()] = obj[key], _a;\n    })));\n  }\n\n  return _obj;\n}\n\nexports.toLowerKeys = toLowerKeys;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-cloud-sdk-core/lib/helper.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","fileType","require","isstream_1","mime_types_1","path_1","logger_1","isFileObject","obj","Boolean","isFileStream","isReadable","path","isFileWithMetadata","data","isFileData","Buffer","isBuffer","isEmptyObject","keys","constructor","getContentType","inputData","contentType","mimeType","lookup","mime","stripTrailingSlash","url","replace","getMissingParams","params","requires","missing","forEach","isMissing","push","Error","join","undefined","isHTML","text","default","debug","test","getFormat","formats","_i","formats_1","item","buildRequestFileObject","fileParam","fileObj","options","filename","from","basename","toString","toLowerKeys","_obj","assign","apply","map","key","_a","toLowerCase"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2014 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar fileType = require(\"file-type\");\nvar isstream_1 = require(\"isstream\");\nvar mime_types_1 = require(\"mime-types\");\nvar path_1 = require(\"path\");\nvar logger_1 = require(\"./logger\");\n// custom type guards\nfunction isFileObject(obj) {\n    return Boolean(obj && obj.value);\n}\nfunction isFileStream(obj) {\n    return Boolean(obj && isstream_1.isReadable(obj) && obj.path);\n}\nfunction isFileWithMetadata(obj) {\n    return Boolean(obj && obj.data && isFileData(obj.data));\n}\nexports.isFileWithMetadata = isFileWithMetadata;\nfunction isFileData(obj) {\n    return Boolean(obj && (isstream_1.isReadable(obj) || Buffer.isBuffer(obj)));\n}\nexports.isFileData = isFileData;\nfunction isEmptyObject(obj) {\n    return Boolean(obj && Object.keys(obj).length === 0 && obj.constructor === Object);\n}\nexports.isEmptyObject = isEmptyObject;\n/**\n * This function retrieves the content type of the input.\n * @param {NodeJS.ReadableStream|Buffer} inputData - The data to retrieve content type for.\n * @returns {string} the content type of the input.\n */\nfunction getContentType(inputData) {\n    var contentType = null;\n    if (isFileStream(inputData)) {\n        // if the inputData is a NodeJS.ReadableStream\n        var mimeType = mime_types_1.lookup(inputData.path);\n        contentType = { mime: mimeType || null };\n    }\n    else if (Buffer.isBuffer(inputData)) {\n        // if the inputData is a Buffer\n        contentType = fileType(inputData);\n    }\n    return contentType ? contentType.mime : null;\n}\nexports.getContentType = getContentType;\n/**\n *\n * @param {string} url - the url string.\n * @returns {string}\n */\nfunction stripTrailingSlash(url) {\n    // Match a forward slash / at the end of the string ($)\n    return url.replace(/\\/$/, '');\n}\nexports.stripTrailingSlash = stripTrailingSlash;\n/**\n * Validates that all required params are provided\n * @param params - the method parameters.\n * @param requires - the required parameter names.\n * @returns {Error|null}\n */\nfunction getMissingParams(params, requires) {\n    var missing;\n    if (!requires) {\n        return null;\n    }\n    else if (!params) {\n        missing = requires;\n    }\n    else {\n        missing = [];\n        requires.forEach(function (require) {\n            if (isMissing(params[require])) {\n                missing.push(require);\n            }\n        });\n    }\n    return missing.length > 0\n        ? new Error('Missing required parameters: ' + missing.join(', '))\n        : null;\n}\nexports.getMissingParams = getMissingParams;\n/**\n * Returns true if value is determined to be \"missing\". Currently defining \"missing\"\n * as `undefined`, `null`, or the empty string.\n *\n * @param value - the parameter value\n * @returns boolean\n */\nfunction isMissing(value) {\n    return value === undefined || value === null || value === '';\n}\n/**\n * Return true if 'text' is html\n * @param  {string} text - The 'text' to analyze\n * @returns {boolean} true if 'text' has html tags\n */\nfunction isHTML(text) {\n    logger_1.default.debug(\"Determining if the text \" + text + \" is HTML.\");\n    return /<[a-z][\\s\\S]*>/i.test(text);\n}\nexports.isHTML = isHTML;\n/**\n * Returns the first match from formats that is key the params map\n * otherwise null\n * @param  {Object} params - The parameters.\n * @param  {string[]} requires - The keys we want to check\n * @returns {string|null}\n */\nfunction getFormat(params, formats) {\n    if (!formats || !params) {\n        logger_1.default.debug(\"No formats to parse in getFormat. Returning null\");\n        return null;\n    }\n    for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n        var item = formats_1[_i];\n        if (item in params) {\n            return item;\n        }\n    }\n    logger_1.default.debug(\"No formats to parse in getFormat. Returning null\");\n    return null;\n}\nexports.getFormat = getFormat;\n/**\n * This function builds a `form-data` object for each file parameter.\n * @param {FileWithMetadata} fileParam The file parameter.\n * @param {NodeJS.ReadableStream|Buffer} fileParam.data The data content of the file.\n * @param {string} fileParam.filename The filename of the file.\n * @param {string} fileParam.contentType The content type of the file.\n * @returns {FileObject}\n */\nfunction buildRequestFileObject(fileParam) {\n    var fileObj;\n    if (isFileObject(fileParam.data)) {\n        // For backward compatibility, we allow the data to be a FileObject.\n        fileObj = { value: fileParam.data.value, options: {} };\n        if (fileParam.data.options) {\n            fileObj.options = {\n                filename: fileParam.filename || fileParam.data.options.filename,\n                contentType: fileParam.contentType || fileParam.data.options.contentType,\n            };\n        }\n    }\n    else {\n        fileObj = {\n            value: fileParam.data,\n            options: {\n                filename: fileParam.filename,\n                contentType: fileParam.contentType,\n            }\n        };\n    }\n    // Also for backward compatibility, we allow data to be a string\n    if (typeof fileObj.value === 'string') {\n        fileObj.value = Buffer.from(fileObj.value);\n    }\n    // build filename\n    var filename = fileObj.options.filename;\n    if (!filename && isFileStream(fileObj.value)) {\n        // if readable stream with path property\n        filename = fileObj.value.path;\n    }\n    // toString handles the case when path is a buffer\n    fileObj.options.filename = filename ? path_1.basename(filename.toString()) : '_';\n    // build contentType\n    if (!fileObj.options.contentType && isFileData(fileObj.value)) {\n        fileObj.options.contentType = getContentType(fileObj.value) || 'application/octet-stream';\n    }\n    return fileObj;\n}\nexports.buildRequestFileObject = buildRequestFileObject;\n/**\n * This function converts an object's keys to lower case.\n * note: does not convert nested keys\n * @param {Object} obj The object to convert the keys of.\n * @returns {Object}\n */\nfunction toLowerKeys(obj) {\n    var _obj = {};\n    if (obj) {\n        _obj = Object.assign.apply(Object, __spreadArrays([{}], Object.keys(obj).map(function (key) {\n            var _a;\n            return (_a = {},\n                _a[key.toLowerCase()] = obj[key],\n                _a);\n        })));\n    }\n    return _obj;\n}\nexports.toLowerKeys = toLowerKeys;\n"]},"metadata":{},"sourceType":"script"}