{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extend = require(\"extend\");\n\nvar token_managers_1 = require(\"../token-managers\");\n\nvar authenticator_1 = require(\"./authenticator\");\n/**\n * Class for common functionality shared by token-request authenticators.\n * [[TokenRequestBasedAuthenticator]]s use token managers to retrieve, store,\n * and refresh tokens. Not intended to be used as stand-alone authenticator,\n * but as parent class to authenticators that have their own token manager\n * implementations.\n *\n * The tokens will be added as an Authorization headers in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\n\n\nvar TokenRequestBasedAuthenticator =\n/** @class */\nfunction (_super) {\n  __extends(TokenRequestBasedAuthenticator, _super);\n  /**\n   * Create a new [[TokenRequestBasedAuthenticator]] instance with an internal [[JwtTokenManager]].\n   *\n   * @param {object} options Configuration options.\n   * @param {string} options.url for HTTP token requests.\n   * @param {boolean} [options.disableSslVerification] A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not.\n   * @param {object<string, string>} [options.headers] to be sent with every\n   *   outbound HTTP requests to token services.\n   */\n\n\n  function TokenRequestBasedAuthenticator(options) {\n    var _this = _super.call(this) || this;\n\n    _this.disableSslVerification = Boolean(options.disableSslVerification);\n    _this.url = options.url; // default to empty object\n\n    _this.headers = options.headers || {};\n    _this.tokenManager = new token_managers_1.JwtTokenManager(options);\n    return _this;\n  }\n  /**\n   * Set the flag that indicates whether verification of the server's SSL\n   * certificate should be disabled or not.\n   *\n   * @param {boolean} value A flag that indicates whether verification of the\n   *   token server's SSL certificate should be disabled or not.\n   */\n\n\n  TokenRequestBasedAuthenticator.prototype.setDisableSslVerification = function (value) {\n    // if they try to pass in a non-boolean value,\n    // use the \"truthy-ness\" of the value\n    this.disableSslVerification = Boolean(value);\n    this.tokenManager.setDisableSslVerification(this.disableSslVerification);\n  };\n  /**\n   * Set headers.\n   *\n   * @param {object<string, string>} headers Default headers to be sent with\n   *   every Cloud Pak For Data token request. Overwrites previous default headers.\n   */\n\n\n  TokenRequestBasedAuthenticator.prototype.setHeaders = function (headers) {\n    if (typeof headers !== 'object') {\n      // do nothing, for now\n      return;\n    }\n\n    this.headers = headers;\n    this.tokenManager.setHeaders(this.headers);\n  };\n  /**\n   * Adds bearer token information to `request`. The bearer token information\n   * will be set in the Authorization property of`request.headers` in the form:\n   *\n   *     Authorization: Bearer <bearer-token>\n   *\n   * @param {object} requestOptions - The request to augment with authentication\n   *   information.\n   * @param {object.<string, string>} requestOptions.headers - The headers the\n   *   authentication information will be added too. Overrides default headers\n   *   where there's conflict.\n   */\n\n\n  TokenRequestBasedAuthenticator.prototype.authenticate = function (requestOptions) {\n    return this.tokenManager.getToken().then(function (token) {\n      var authHeader = {\n        Authorization: \"Bearer \" + token\n      };\n      requestOptions.headers = extend(true, {}, requestOptions.headers, authHeader);\n      return;\n    });\n  };\n\n  return TokenRequestBasedAuthenticator;\n}(authenticator_1.Authenticator);\n\nexports.TokenRequestBasedAuthenticator = TokenRequestBasedAuthenticator;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/ibm-cloud-sdk-core/auth/authenticators/token-request-based-authenticator.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","extend","require","token_managers_1","authenticator_1","TokenRequestBasedAuthenticator","_super","options","_this","call","disableSslVerification","Boolean","url","headers","tokenManager","JwtTokenManager","setDisableSslVerification","setHeaders","authenticate","requestOptions","getToken","then","token","authHeader","Authorization","Authenticator"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar extend = require(\"extend\");\nvar token_managers_1 = require(\"../token-managers\");\nvar authenticator_1 = require(\"./authenticator\");\n/**\n * Class for common functionality shared by token-request authenticators.\n * [[TokenRequestBasedAuthenticator]]s use token managers to retrieve, store,\n * and refresh tokens. Not intended to be used as stand-alone authenticator,\n * but as parent class to authenticators that have their own token manager\n * implementations.\n *\n * The tokens will be added as an Authorization headers in the form:\n *\n *      Authorization: Bearer <bearer-token>\n */\nvar TokenRequestBasedAuthenticator = /** @class */ (function (_super) {\n    __extends(TokenRequestBasedAuthenticator, _super);\n    /**\n     * Create a new [[TokenRequestBasedAuthenticator]] instance with an internal [[JwtTokenManager]].\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.url for HTTP token requests.\n     * @param {boolean} [options.disableSslVerification] A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not.\n     * @param {object<string, string>} [options.headers] to be sent with every\n     *   outbound HTTP requests to token services.\n     */\n    function TokenRequestBasedAuthenticator(options) {\n        var _this = _super.call(this) || this;\n        _this.disableSslVerification = Boolean(options.disableSslVerification);\n        _this.url = options.url;\n        // default to empty object\n        _this.headers = options.headers || {};\n        _this.tokenManager = new token_managers_1.JwtTokenManager(options);\n        return _this;\n    }\n    /**\n     * Set the flag that indicates whether verification of the server's SSL\n     * certificate should be disabled or not.\n     *\n     * @param {boolean} value A flag that indicates whether verification of the\n     *   token server's SSL certificate should be disabled or not.\n     */\n    TokenRequestBasedAuthenticator.prototype.setDisableSslVerification = function (value) {\n        // if they try to pass in a non-boolean value,\n        // use the \"truthy-ness\" of the value\n        this.disableSslVerification = Boolean(value);\n        this.tokenManager.setDisableSslVerification(this.disableSslVerification);\n    };\n    /**\n     * Set headers.\n     *\n     * @param {object<string, string>} headers Default headers to be sent with\n     *   every Cloud Pak For Data token request. Overwrites previous default headers.\n     */\n    TokenRequestBasedAuthenticator.prototype.setHeaders = function (headers) {\n        if (typeof headers !== 'object') {\n            // do nothing, for now\n            return;\n        }\n        this.headers = headers;\n        this.tokenManager.setHeaders(this.headers);\n    };\n    /**\n     * Adds bearer token information to `request`. The bearer token information\n     * will be set in the Authorization property of`request.headers` in the form:\n     *\n     *     Authorization: Bearer <bearer-token>\n     *\n     * @param {object} requestOptions - The request to augment with authentication\n     *   information.\n     * @param {object.<string, string>} requestOptions.headers - The headers the\n     *   authentication information will be added too. Overrides default headers\n     *   where there's conflict.\n     */\n    TokenRequestBasedAuthenticator.prototype.authenticate = function (requestOptions) {\n        return this.tokenManager.getToken().then(function (token) {\n            var authHeader = { Authorization: \"Bearer \" + token };\n            requestOptions.headers = extend(true, {}, requestOptions.headers, authHeader);\n            return;\n        });\n    };\n    return TokenRequestBasedAuthenticator;\n}(authenticator_1.Authenticator));\nexports.TokenRequestBasedAuthenticator = TokenRequestBasedAuthenticator;\n"]},"metadata":{},"sourceType":"script"}