{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar supportTypes = ['map', 'array', 'object'];\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nvar Replaceable = /*#__PURE__*/function () {\n  function Replaceable(object) {\n    _classCallCheck(this, Replaceable);\n\n    _defineProperty(this, 'object', void 0);\n\n    _defineProperty(this, 'type', void 0);\n\n    this.object = object;\n    this.type = (0, _jestGetType.default)(object);\n\n    if (!supportTypes.includes(this.type)) {\n      throw new Error(\"Type \".concat(this.type, \" is not support in Replaceable!\"));\n    }\n  }\n\n  _createClass(Replaceable, [{\n    key: \"forEach\",\n    value: function forEach(cb) {\n      var _this = this;\n\n      if (this.type === 'object') {\n        var descriptors = Object.getOwnPropertyDescriptors(this.object);\n        [].concat(_toConsumableArray(Object.keys(descriptors)), _toConsumableArray(Object.getOwnPropertySymbols(descriptors))) //@ts-expect-error because typescript do not support symbol key in object\n        //https://github.com/microsoft/TypeScript/issues/1863\n        .filter(function (key) {\n          return descriptors[key].enumerable;\n        }).forEach(function (key) {\n          cb(_this.object[key], key, _this.object);\n        });\n      } else {\n        this.object.forEach(cb);\n      }\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      if (this.type === 'map') {\n        return this.object.get(key);\n      }\n\n      return this.object[key];\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (this.type === 'map') {\n        this.object.set(key, value);\n      } else {\n        this.object[key] = value;\n      }\n    }\n  }], [{\n    key: \"isReplaceable\",\n    value: function isReplaceable(obj1, obj2) {\n      var obj1Type = (0, _jestGetType.default)(obj1);\n      var obj2Type = (0, _jestGetType.default)(obj2);\n      return obj1Type === obj2Type && supportTypes.includes(obj1Type);\n    }\n  }]);\n\n  return Replaceable;\n}();\n/* eslint-enable */\n\n\nexports.default = Replaceable;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/node_modules/jest-matcher-utils/build/Replaceable.js"],"names":["Object","defineProperty","exports","value","default","_jestGetType","_interopRequireDefault","require","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","supportTypes","Replaceable","object","type","includes","Error","cb","descriptors","getOwnPropertyDescriptors","keys","getOwnPropertySymbols","filter","forEach","get","set","obj1","obj2","obj1Type","obj2Type"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestGetType = _interopRequireDefault(require('jest-get-type'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst supportTypes = ['map', 'array', 'object'];\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nclass Replaceable {\n  constructor(object) {\n    _defineProperty(this, 'object', void 0);\n\n    _defineProperty(this, 'type', void 0);\n\n    this.object = object;\n    this.type = (0, _jestGetType.default)(object);\n\n    if (!supportTypes.includes(this.type)) {\n      throw new Error(`Type ${this.type} is not support in Replaceable!`);\n    }\n  }\n\n  static isReplaceable(obj1, obj2) {\n    const obj1Type = (0, _jestGetType.default)(obj1);\n    const obj2Type = (0, _jestGetType.default)(obj2);\n    return obj1Type === obj2Type && supportTypes.includes(obj1Type);\n  }\n\n  forEach(cb) {\n    if (this.type === 'object') {\n      const descriptors = Object.getOwnPropertyDescriptors(this.object);\n      [\n        ...Object.keys(descriptors),\n        ...Object.getOwnPropertySymbols(descriptors)\n      ] //@ts-expect-error because typescript do not support symbol key in object\n        //https://github.com/microsoft/TypeScript/issues/1863\n        .filter(key => descriptors[key].enumerable)\n        .forEach(key => {\n          cb(this.object[key], key, this.object);\n        });\n    } else {\n      this.object.forEach(cb);\n    }\n  }\n\n  get(key) {\n    if (this.type === 'map') {\n      return this.object.get(key);\n    }\n\n    return this.object[key];\n  }\n\n  set(key, value) {\n    if (this.type === 'map') {\n      this.object.set(key, value);\n    } else {\n      this.object[key] = value;\n    }\n  }\n}\n/* eslint-enable */\n\nexports.default = Replaceable;\n"]},"metadata":{},"sourceType":"script"}