{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.translationIds = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _iconsReact = require(\"@carbon/icons-react\");\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _keyboard = require(\"../../internal/keyboard\");\n\nvar _defaultTranslations;\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar prefix = _carbonComponents.settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled,\n      onClearSelection = _ref.onClearSelection;\n  var className = (0, _classnames.default)(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if ((0, _keyboard.match)(event, _keyboard.keys.Enter)) {\n      clearSelection(event);\n\n      if (onClearSelection) {\n        onClearSelection(event);\n      }\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: disabled ? -1 : 0,\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    \"aria-label\": \"Clear Selection\",\n    title: description\n  }, selectionCount, /*#__PURE__*/_react.default.createElement(_iconsReact.Close16, null));\n};\n\nvar translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nexports.translationIds = translationIds;\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: _propTypes.default.func.isRequired,\n\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: _propTypes.default.func,\n\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * clear selection element is clicked\n   */\n  onClick: _propTypes.default.func,\n\n  /**\n   * Specify an optional `onKeyDown` handler that is called when the underlying\n   * clear selection element fires a keydown event\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: _propTypes.default.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: _propTypes.default.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nvar _default = ListBoxSelection;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components/node_modules/carbon-components-react/lib/components/ListBox/ListBoxSelection.js"],"names":["Object","defineProperty","exports","value","default","translationIds","_classnames","_interopRequireDefault","require","_react","_propTypes","_iconsReact","_carbonComponents","_keyboard","_defaultTranslations","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","prefix","settings","ListBoxSelection","_ref","_cx","clearSelection","selectionCount","t","translateWithId","disabled","onClearSelection","className","concat","handleOnClick","event","stopPropagation","handleOnKeyDown","match","keys","Enter","description","createElement","role","tabIndex","onClick","onKeyDown","title","Close16","defaultTranslations","propTypes","func","isRequired","bool","number","defaultProps","id","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.translationIds = void 0;\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _iconsReact = require(\"@carbon/icons-react\");\n\nvar _carbonComponents = require(\"carbon-components\");\n\nvar _keyboard = require(\"../../internal/keyboard\");\n\nvar _defaultTranslations;\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar prefix = _carbonComponents.settings.prefix;\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\n\nvar ListBoxSelection = function ListBoxSelection(_ref) {\n  var _cx;\n\n  var clearSelection = _ref.clearSelection,\n      selectionCount = _ref.selectionCount,\n      t = _ref.translateWithId,\n      disabled = _ref.disabled,\n      onClearSelection = _ref.onClearSelection;\n  var className = (0, _classnames.default)(\"\".concat(prefix, \"--list-box__selection\"), (_cx = {}, _defineProperty(_cx, \"\".concat(prefix, \"--tag--filter\"), selectionCount), _defineProperty(_cx, \"\".concat(prefix, \"--list-box__selection--multi\"), selectionCount), _cx));\n\n  var handleOnClick = function handleOnClick(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    }\n\n    clearSelection(event);\n\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n\n  var handleOnKeyDown = function handleOnKeyDown(event) {\n    event.stopPropagation();\n\n    if (disabled) {\n      return;\n    } // When a user hits ENTER, we'll clear the selection\n\n\n    if ((0, _keyboard.match)(event, _keyboard.keys.Enter)) {\n      clearSelection(event);\n\n      if (onClearSelection) {\n        onClearSelection(event);\n      }\n    }\n  };\n\n  var description = selectionCount ? t('clear.all') : t('clear.selection');\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: disabled ? -1 : 0,\n    onClick: handleOnClick,\n    onKeyDown: handleOnKeyDown,\n    \"aria-label\": \"Clear Selection\",\n    title: description\n  }, selectionCount, /*#__PURE__*/_react.default.createElement(_iconsReact.Close16, null));\n};\n\nvar translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\nexports.translationIds = translationIds;\nvar defaultTranslations = (_defaultTranslations = {}, _defineProperty(_defaultTranslations, translationIds['clear.all'], 'Clear all selected items'), _defineProperty(_defaultTranslations, translationIds['clear.selection'], 'Clear selected item'), _defaultTranslations);\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: _propTypes.default.func.isRequired,\n\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: _propTypes.default.func,\n\n  /**\n   * Specify an optional `onClick` handler that is called when the underlying\n   * clear selection element is clicked\n   */\n  onClick: _propTypes.default.func,\n\n  /**\n   * Specify an optional `onKeyDown` handler that is called when the underlying\n   * clear selection element fires a keydown event\n   */\n  onKeyDown: _propTypes.default.func,\n\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: _propTypes.default.number,\n\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: _propTypes.default.func.isRequired\n};\nListBoxSelection.defaultProps = {\n  translateWithId: function translateWithId(id) {\n    return defaultTranslations[id];\n  }\n};\nvar _default = ListBoxSelection;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}