{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar jwt = require(\"jsonwebtoken\");\n\nvar logger_1 = require(\"../../lib/logger\");\n\nvar token_manager_1 = require(\"./token-manager\");\n/**\n * A class for shared functionality for parsing, storing, and requesting\n * JWT tokens. Intended to be used as a parent to be extended for token\n * request management. Child classes should implement `requestToken()`\n * to retrieve the bearer token from intended sources.\n */\n\n\nvar JwtTokenManager =\n/** @class */\nfunction (_super) {\n  __extends(JwtTokenManager, _super);\n  /**\n   * Create a new [[JwtTokenManager]] instance.\n   * @constructor\n   * @param {object} options Configuration options.\n   * @param {string} options.url for HTTP token requests.\n   * @param {boolean} [options.disableSslVerification] A flag that indicates\n   *   whether verification of the token server's SSL certificate should be\n   *   disabled or not.\n   * @param {object<string, string>} [options.headers] Headers to be sent with every\n   *   outbound HTTP requests to token services.\n   */\n\n\n  function JwtTokenManager(options) {\n    var _this = this; // all parameters are optional\n\n\n    options = options || {};\n    _this = _super.call(this, options) || this;\n    _this.tokenName = 'access_token';\n    _this.tokenInfo = {};\n    return _this;\n  }\n  /**\n   * Request a JWT using an API key.\n   *\n   * @returns {Promise}\n   */\n\n\n  JwtTokenManager.prototype.requestToken = function () {\n    var errMsg = '`requestToken` MUST be overridden by a subclass of JwtTokenManagerV1.';\n    var err = new Error(errMsg);\n    logger_1.default.error(errMsg);\n    return Promise.reject(err);\n  };\n  /**\n   * Save the JWT service response and the calculated expiration time to the object's state.\n   *\n   * @param tokenResponse - Response object from JWT service request\n   * @protected\n   * @returns {void}\n   */\n\n\n  JwtTokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n    var responseBody = tokenResponse.result || {};\n    this.accessToken = responseBody[this.tokenName];\n\n    if (!this.accessToken) {\n      var err = 'Access token not present in response';\n      logger_1.default.error(err);\n      throw new Error(err);\n    } // the time of expiration is found by decoding the JWT access token\n    // exp is the time of expire and iat is the time of token retrieval\n\n\n    var decodedResponse = jwt.decode(this.accessToken);\n\n    if (!decodedResponse) {\n      var err = 'Access token recieved is not a valid JWT';\n      logger_1.default.error(err);\n      throw new Error(err);\n    }\n\n    var exp = decodedResponse.exp,\n        iat = decodedResponse.iat; // There are no required claims in JWT\n\n    if (!exp || !iat) {\n      this.expireTime = 0;\n      this.refreshTime = 0;\n    } else {\n      var fractionOfTtl = 0.8;\n      var timeToLive = exp - iat;\n      this.expireTime = exp;\n      this.refreshTime = exp - timeToLive * (1.0 - fractionOfTtl);\n    }\n\n    this.tokenInfo = Object.assign({}, responseBody);\n  };\n\n  return JwtTokenManager;\n}(token_manager_1.TokenManager);\n\nexports.JwtTokenManager = JwtTokenManager;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/auth/token-managers/jwt-token-manager.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","defineProperty","exports","value","jwt","require","logger_1","token_manager_1","JwtTokenManager","_super","options","_this","call","tokenName","tokenInfo","requestToken","errMsg","err","Error","default","error","Promise","reject","saveTokenInfo","tokenResponse","responseBody","result","accessToken","decodedResponse","decode","exp","iat","expireTime","refreshTime","fractionOfTtl","timeToLive","assign","TokenManager"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar jwt = require(\"jsonwebtoken\");\nvar logger_1 = require(\"../../lib/logger\");\nvar token_manager_1 = require(\"./token-manager\");\n/**\n * A class for shared functionality for parsing, storing, and requesting\n * JWT tokens. Intended to be used as a parent to be extended for token\n * request management. Child classes should implement `requestToken()`\n * to retrieve the bearer token from intended sources.\n */\nvar JwtTokenManager = /** @class */ (function (_super) {\n    __extends(JwtTokenManager, _super);\n    /**\n     * Create a new [[JwtTokenManager]] instance.\n     * @constructor\n     * @param {object} options Configuration options.\n     * @param {string} options.url for HTTP token requests.\n     * @param {boolean} [options.disableSslVerification] A flag that indicates\n     *   whether verification of the token server's SSL certificate should be\n     *   disabled or not.\n     * @param {object<string, string>} [options.headers] Headers to be sent with every\n     *   outbound HTTP requests to token services.\n     */\n    function JwtTokenManager(options) {\n        var _this = this;\n        // all parameters are optional\n        options = options || {};\n        _this = _super.call(this, options) || this;\n        _this.tokenName = 'access_token';\n        _this.tokenInfo = {};\n        return _this;\n    }\n    /**\n     * Request a JWT using an API key.\n     *\n     * @returns {Promise}\n     */\n    JwtTokenManager.prototype.requestToken = function () {\n        var errMsg = '`requestToken` MUST be overridden by a subclass of JwtTokenManagerV1.';\n        var err = new Error(errMsg);\n        logger_1.default.error(errMsg);\n        return Promise.reject(err);\n    };\n    /**\n     * Save the JWT service response and the calculated expiration time to the object's state.\n     *\n     * @param tokenResponse - Response object from JWT service request\n     * @protected\n     * @returns {void}\n     */\n    JwtTokenManager.prototype.saveTokenInfo = function (tokenResponse) {\n        var responseBody = tokenResponse.result || {};\n        this.accessToken = responseBody[this.tokenName];\n        if (!this.accessToken) {\n            var err = 'Access token not present in response';\n            logger_1.default.error(err);\n            throw new Error(err);\n        }\n        // the time of expiration is found by decoding the JWT access token\n        // exp is the time of expire and iat is the time of token retrieval\n        var decodedResponse = jwt.decode(this.accessToken);\n        if (!decodedResponse) {\n            var err = 'Access token recieved is not a valid JWT';\n            logger_1.default.error(err);\n            throw new Error(err);\n        }\n        var exp = decodedResponse.exp, iat = decodedResponse.iat;\n        // There are no required claims in JWT\n        if (!exp || !iat) {\n            this.expireTime = 0;\n            this.refreshTime = 0;\n        }\n        else {\n            var fractionOfTtl = 0.8;\n            var timeToLive = exp - iat;\n            this.expireTime = exp;\n            this.refreshTime = exp - (timeToLive * (1.0 - fractionOfTtl));\n        }\n        this.tokenInfo = Object.assign({}, responseBody);\n    };\n    return JwtTokenManager;\n}(token_manager_1.TokenManager));\nexports.JwtTokenManager = JwtTokenManager;\n"]},"metadata":{},"sourceType":"script"}