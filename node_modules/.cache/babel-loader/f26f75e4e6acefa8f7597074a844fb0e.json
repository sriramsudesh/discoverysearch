{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _jestMatchersObject = require('./jestMatchersObject');\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n\nvar resetAssertionsLocalState = function resetAssertionsLocalState() {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\n\nvar extractExpectedAssertionsErrors = function extractExpectedAssertionsErrors() {\n  var result = [];\n\n  var _ref = (0, _jestMatchersObject.getState)(),\n      assertionCalls = _ref.assertionCalls,\n      expectedAssertionsNumber = _ref.expectedAssertionsNumber,\n      expectedAssertionsNumberError = _ref.expectedAssertionsNumberError,\n      isExpectingAssertions = _ref.isExpectingAssertions,\n      isExpectingAssertionsError = _ref.isExpectingAssertionsError;\n\n  resetAssertionsLocalState();\n\n  if (typeof expectedAssertionsNumber === 'number' && assertionCalls !== expectedAssertionsNumber) {\n    var numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber));\n    expectedAssertionsNumberError.message = (0, _jestMatcherUtils.matcherHint)('.assertions', '', String(expectedAssertionsNumber), {\n      isDirectExpectCall: true\n    }) + '\\n\\n' + \"Expected \".concat(numOfAssertionsExpected, \" to be called but received \") + (0, _jestMatcherUtils.RECEIVED_COLOR)((0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)) + '.';\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n\n  if (isExpectingAssertions && assertionCalls === 0) {\n    var expected = (0, _jestMatcherUtils.EXPECTED_COLOR)('at least one assertion');\n    var received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message = (0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {\n      isDirectExpectCall: true\n    }) + '\\n\\n' + \"Expected \".concat(expected, \" to be called but \").concat(received, \".\");\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n\n  return result;\n};\n\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;","map":{"version":3,"sources":["/Users/sudesh/Documents/DEV2021/wacode/discovery-components-web/node_modules/ibm-cloud-sdk-core/node_modules/expect/build/extractExpectedAssertionsErrors.js"],"names":["Object","defineProperty","exports","value","default","_jestMatcherUtils","require","_jestMatchersObject","resetAssertionsLocalState","setState","assertionCalls","expectedAssertionsNumber","isExpectingAssertions","extractExpectedAssertionsErrors","result","getState","expectedAssertionsNumberError","isExpectingAssertionsError","numOfAssertionsExpected","EXPECTED_COLOR","pluralize","message","matcherHint","String","isDirectExpectCall","RECEIVED_COLOR","push","actual","toString","error","expected","received","_default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nvar _jestMatcherUtils = require('jest-matcher-utils');\n\nvar _jestMatchersObject = require('./jestMatchersObject');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nconst resetAssertionsLocalState = () => {\n  (0, _jestMatchersObject.setState)({\n    assertionCalls: 0,\n    expectedAssertionsNumber: null,\n    isExpectingAssertions: false\n  });\n}; // Create and format all errors related to the mismatched number of `expect`\n// calls and reset the matcher's state.\n\nconst extractExpectedAssertionsErrors = () => {\n  const result = [];\n  const {\n    assertionCalls,\n    expectedAssertionsNumber,\n    expectedAssertionsNumberError,\n    isExpectingAssertions,\n    isExpectingAssertionsError\n  } = (0, _jestMatchersObject.getState)();\n  resetAssertionsLocalState();\n\n  if (\n    typeof expectedAssertionsNumber === 'number' &&\n    assertionCalls !== expectedAssertionsNumber\n  ) {\n    const numOfAssertionsExpected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      (0, _jestMatcherUtils.pluralize)('assertion', expectedAssertionsNumber)\n    );\n    expectedAssertionsNumberError.message =\n      (0, _jestMatcherUtils.matcherHint)(\n        '.assertions',\n        '',\n        String(expectedAssertionsNumber),\n        {\n          isDirectExpectCall: true\n        }\n      ) +\n      '\\n\\n' +\n      `Expected ${numOfAssertionsExpected} to be called but received ` +\n      (0, _jestMatcherUtils.RECEIVED_COLOR)(\n        (0, _jestMatcherUtils.pluralize)('assertion call', assertionCalls || 0)\n      ) +\n      '.';\n    result.push({\n      actual: assertionCalls.toString(),\n      error: expectedAssertionsNumberError,\n      expected: expectedAssertionsNumber.toString()\n    });\n  }\n\n  if (isExpectingAssertions && assertionCalls === 0) {\n    const expected = (0, _jestMatcherUtils.EXPECTED_COLOR)(\n      'at least one assertion'\n    );\n    const received = (0, _jestMatcherUtils.RECEIVED_COLOR)('received none');\n    isExpectingAssertionsError.message =\n      (0, _jestMatcherUtils.matcherHint)('.hasAssertions', '', '', {\n        isDirectExpectCall: true\n      }) +\n      '\\n\\n' +\n      `Expected ${expected} to be called but ${received}.`;\n    result.push({\n      actual: 'none',\n      error: isExpectingAssertionsError,\n      expected: 'at least one'\n    });\n  }\n\n  return result;\n};\n\nvar _default = extractExpectedAssertionsErrors;\nexports.default = _default;\n"]},"metadata":{},"sourceType":"script"}